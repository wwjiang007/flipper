"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1480],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},r.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=i.createContext({}),d=function(e){return function(t){var a=m(t.components);return i.createElement(e,r({},t,{components:a}))}},m=function(e){var t=i.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=m(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(a),u=n,h=d["".concat(o,".").concat(u)]||d[u]||c[u]||r;return a?i.createElement(h,l(l({ref:t},p),{},{components:a})):i.createElement(h,l({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},39073:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var i=a(83117),n=a(80102),r=(a(67294),a(3905)),o=a(44996),l=["components"],s={id:"public-releases",title:"Public Flipper Releases"},p=void 0,d={unversionedId:"extending/public-releases",id:"extending/public-releases",title:"Public Flipper Releases",description:"This page outlines how Flipper releases work on GitHub.",source:"@site/../docs/extending/public-releases.mdx",sourceDirName:"extending",slug:"/extending/public-releases",permalink:"/docs/extending/public-releases",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/public-releases.mdx",tags:[],version:"current",frontMatter:{id:"public-releases",title:"Public Flipper Releases"},sidebar:"main",previous:{title:"Linters",permalink:"/docs/internals/linters"},next:{title:"Testing React Native Changes",permalink:"/docs/extending/testing-rn"}},m={},u=[{value:"Kick-Off",id:"kick-off",level:2},{value:"Desktop Release",id:"desktop-release",level:2},{value:"iOS Release",id:"ios-release",level:2},{value:"npm releases",id:"npm-releases",level:2},{value:"Android Release",id:"android-release",level:2},{value:"CircleCI Configuration",id:"circleci-configuration",level:3},{value:"GitHub Action Workflow",id:"github-action-workflow",level:3},{value:"Troubleshooting",id:"troubleshooting",level:4}],c={toc:u};function h(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.mdx)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"This page outlines how Flipper releases work on GitHub."),(0,r.mdx)("h2",{id:"kick-off"},"Kick-Off"),(0,r.mdx)("p",null,"A release is kicked off by a special commit that has a subject with the format\n",(0,r.mdx)("inlineCode",{parentName:"p"},"Flipper Release vX.Y.Z")," (see the GitHub ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/commit/4fa2c9761a8359c65ccc62fee76490572616f0c1"},"example"),")."),(0,r.mdx)("p",null,"This is triggered from a bot within Facebook that runs ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/scripts/prepare-release.sh"},"prepare-release.sh"),". The only thing special about the commit is its subject line. Anyone could run the script and kick off the remaining jobs once the commit lands in main."),(0,r.mdx)("p",null,"The commit bumps the version of Flipper Desktop as well as various SDK components and libraries that are to be published to npm and other package repositories."),(0,r.mdx)("p",null,"Importantly, it is immediately followed by a 'SNAPSHOT' commit (see the GitHub ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/commit/02a56da3f5440b35616604f73167307319cca48f"},"example"),"), which sets the version of our Java dependencies to ",(0,r.mdx)("inlineCode",{parentName:"p"},"X.Y.(Z+1)-SNAPSHOT")," (that's the patch version incremented by one and a ",(0,r.mdx)("inlineCode",{parentName:"p"},"-SNAPSHOT")," suffix appended). It's a weird Maven-ism that enables us to continuously publish snapshot releases from the main branch."),(0,r.mdx)("h2",{id:"desktop-release"},"Desktop Release"),(0,r.mdx)("p",null,"The release process for the desktop app is entirely driven by ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions"),".\nThe entry point is the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/release.yml"},"release.yml")," workflow, which is triggered by changes to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"desktop/package.json")," file on the main branch."),(0,r.mdx)("p",null,"GitHub Actions has a limitation that we need to work around: it enables push events to act as triggers for a workflow, but not individual commits. This requires us to first scan through all potential commits of a push to identify commits that match the aforementioned versioning schema. This is done through a ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/1cad57d75077bdb3594e33e845ab6d226c5d2c86/.github/workflows/release.yml#L15-L18"},"custom action"),"."),(0,r.mdx)("p",null,"If this action is successful, the remaining steps are taken:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Check out the versioning commit."),(0,r.mdx)("li",{parentName:"ul"},"Create a git tag for it."),(0,r.mdx)("li",{parentName:"ul"},"Create a GitHub release for the tag."),(0,r.mdx)("li",{parentName:"ul"},"Build releases for Linux, Mac and Windows."),(0,r.mdx)("li",{parentName:"ul"},"Upload all these releases to temporary storage."),(0,r.mdx)("li",{parentName:"ul"},"Download the release artifacts and attach them to the GitHub release."),(0,r.mdx)("li",{parentName:"ul"},"Dispatch to separate workflows for publishing Cocoapods and npm packages (see below).")),(0,r.mdx)("h2",{id:"ios-release"},"iOS Release"),(0,r.mdx)("p",null,"iOS releases are run in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," but exist as a separate workflow. They can be triggered in three ways:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"When a tag is pushed."),(0,r.mdx)("li",{parentName:"ol"},"By manually triggering the workflow (see the following screenshot)."),(0,r.mdx)("li",{parentName:"ol"},"Through a ",(0,r.mdx)("inlineCode",{parentName:"li"},"dispatch_workflow")," event that is issued as a last step of the desktop release process.")),(0,r.mdx)("img",{alt:"Manually triggering a workflow",src:(0,o.default)("img/trigger-publish-pod-workflow.png")}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/publish-pods.yml"},"workflow")," follows the default Cocoapods update procedure, bumps and publishes both the Flipper and FlipperKit pod, then creates a ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/pull/1754"},"Pull Request")," (PR) containing the updated references. This PR must be manually merged."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},(0,r.mdx)("strong",{parentName:"p"},"Authentication")," is managed through the secret environment variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"COCOAPODS_TRUNK_TOKEN"),".")),(0,r.mdx)("h2",{id:"npm-releases"},"npm releases"),(0,r.mdx)("p",null,"The JavaScript libraries published as part of a Flipper release closely follow the iOS release procedure.\nAs with the ",(0,r.mdx)("a",{parentName:"p",href:"#ios-release"},"iOS release"),", it's a workflow that is triggered by one of the three events, which should, in all but exceptional circumstances, be a dispatch event.\nThe workflow is defined in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/publish-npm.yml"},"publish-npm.yml"),"."),(0,r.mdx)("p",null,"From there, we use a ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/scripts/bump-versions.ts"},"script")," to bump the versions of our Yarn workspaces, and publish all public packages (",(0,r.mdx)("inlineCode",{parentName:"p"},"flipper"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"flipper-babel-transformer"),", ...) and our React Native bindings."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"The ",(0,r.mdx)("strong",{parentName:"p"},"authentication")," to npm is managed by a secret environment variable called ",(0,r.mdx)("inlineCode",{parentName:"p"},"FLIPPER_NPM_TOKEN"),".")),(0,r.mdx)("h2",{id:"android-release"},"Android Release"),(0,r.mdx)("p",null,"Android has three types of jobs currently running:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/android-sample.yml"},"snapshot")," - runs on every commit on the main branch and publishes 'SNAPSHOT' releases to Maven Central. It runs on CircleCI."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/publish-android.yml"},"publish-android")," - usually triggered by a ",(0,r.mdx)("inlineCode",{parentName:"li"},"dispatch_workflow")," event. It uploads our Java artifacts to Maven Central and attaches the Android sample app to the release page on GitHub. It runs on GitHub Actions."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/.github/workflows/android-sample.yml"},"android-sample")," - runs on every push and open pull request. It builds the sample and tutorial apps and uploads the sample APK as artifact for easy debugging and testing.")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"snapshot")," job is an outlier in that it still runs on CircleCI. This gives us some additional capacity as these jobs can take quite a while and the occasional failure due to timeouts or network errors isn't a dealbreaker."),(0,r.mdx)("h3",{id:"circleci-configuration"},"CircleCI Configuration"),(0,r.mdx)("p",null,"The Android snapshot build is run on ",(0,r.mdx)("a",{parentName:"p",href:"https://app.circleci.com/pipelines/github/facebook/flipper?branch=main"},"CircleCI")," and configured in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/.circleci/config.yml"},".circleci/config.yml"),"."),(0,r.mdx)("p",null,"There are two potential points for breakage:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/1cad57d75077bdb3594e33e845ab6d226c5d2c86/.circleci/config.yml#L5"},"Base image")," - used in the build instructions refers to a specific SDK version and requires occasional updating."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/b5e613141e98528f45d3d2864e08278b1c7d4973/.circleci/config.yml#L23"},"Platform installation")," - runs through the ",(0,r.mdx)("inlineCode",{parentName:"li"},"sdkmanager")," tool of the Android SDK. It may require additional SDKs or NDKs to be installed if they're not part of the base image.")),(0,r.mdx)("p",null,"One non-obvious aspect is that of ",(0,r.mdx)("strong",{parentName:"p"},"authentication")," for uploads. The repository contains a symmetrically encrypted copy of our credentials to Sonatype (for Maven Central). The ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/1cad57d75077bdb3594e33e845ab6d226c5d2c86/scripts/publish-android-snapshot.sh"},"snapshot release script")," decodes the file on the fly by using a secret Circle CI exposes through an environment variable."),(0,r.mdx)("h3",{id:"github-action-workflow"},"GitHub Action Workflow"),(0,r.mdx)("p",null,"As with the ",(0,r.mdx)("a",{parentName:"p",href:"#ios-release"},"iOS release")," (see above), the workflow for Android releases is triggered by three types of events:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"When a tag is pushed."),(0,r.mdx)("li",{parentName:"ol"},"By manually triggering the workflow."),(0,r.mdx)("li",{parentName:"ol"},"Through a ",(0,r.mdx)("inlineCode",{parentName:"li"},"dispatch_workflow")," event, which is issued as a last step of the desktop release process.")),(0,r.mdx)("p",null,"In normal circumstances, the third event will kick off an Android release build. The workflow is defined in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/8d5f136a349e77ec9ccebd303054e0e142cbab30/.github/workflows/publish-android.yml"},"publish-android.yml")," in GitHub."),(0,r.mdx)("p",null,"We first install two NDK versions that are required by our dependencies. To publish release artifacts (non-",(0,r.mdx)("inlineCode",{parentName:"p"},"SNAPSHOT")," artifacts), that Maven Central, requires them to be signed with a GnuPG key. The\nonly requirement about the key is that it needs to be exported to a Keyserver. Ours is published to the ",(0,r.mdx)("a",{parentName:"p",href:"https://keyserver.ubuntu.com/pks/lookup?search=Flipper+Bot+%28I+sign+Flipper+releases%29+%3Crealpassy%40fb.com%3E&fingerprint=on&op=index"},"Ubuntu Keyserver"),"."),(0,r.mdx)("p",null,"To publish your own key, run the following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"gpg --send-keys --keyserver keyserver.ubuntu.com <KEY_ID>\n")),(0,r.mdx)("p",null,"For the initial setup, the secret keyring was exported as ",(0,r.mdx)("inlineCode",{parentName:"p"},"gpg2 --export-secret-keys <secret_key_id> | base64")," and stored as a secret on GitHub with the name ",(0,r.mdx)("inlineCode",{parentName:"p"},"GPG_KEY_CONTENTS"),"."),(0,r.mdx)("p",null,"As part of the workflow, it is written to disk after reversing the base64 encoding. The key id and key password are subsequently stored in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"gradle.properties")," along with the path to the key. Paths here need to be absolute, otherwise Gradle will look them up relative to the sub-projects (",(0,r.mdx)("inlineCode",{parentName:"p"},"android/"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"android/sample"),", ...)."),(0,r.mdx)("p",null,"Maven Central is managed by Sonatype. To sign up follow their ",(0,r.mdx)("a",{parentName:"p",href:"https://central.sonatype.org/pages/ossrh-guide.html"},"Getting Started")," guide, which involves creating a JIRA account and opening an issue to apply for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"com.facebook")," namespace. You will need to find an existing member of this namespace to vouch for you. While this is a bit of a task, it ensures that nobody\nfrom outside the organisation can publish under our name."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"publish")," (previously ",(0,r.mdx)("inlineCode",{parentName:"p"},"uploadArchives"),") gradle task uses the OSSRH Sonatype Nexus credentials to upload all Flipper Java artifacts. This includes the core SDK as well as our plugins. The credentials are ",(0,r.mdx)("em",{parentName:"p"},"not")," your login to Nexus, but the user tokens you can get from ",(0,r.mdx)("a",{parentName:"p",href:"https://oss.sonatype.org/#profile;User%20Token"},"your profile"),"."),(0,r.mdx)("p",null,"This is followed by the ",(0,r.mdx)("inlineCode",{parentName:"p"},"closeAndReleaseRepository")," gradle task, which is part of the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/vanniktech/gradle-maven-publish-plugin"},"gradle-maven-publish-plugin"),". It uses the credentials to identify a 'staging repository' and automatically close it. This staging repository is identified by the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/8d5f136a349e77ec9ccebd303054e0e142cbab30/gradle.properties#L9"},"SONATYPE_STAGING_PROFILE")," property. Sonatype usually requires people to manually go to a web UI, verify that a given release is complete and click some buttons. The plugin aims to do this for you."),(0,r.mdx)("h4",{id:"troubleshooting"},"Troubleshooting"),(0,r.mdx)("p",null,"There are a few potential 'troubles':"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"Upload fails")," - Maven Central is (at the time of writing) overloaded with projects migrating from JCenter. The upload task attempts to retry but it can still time out. Manually re-running the job through the GitHub UI should do the trick.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"Closing fails")," - as before, this can happen because of timeouts.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"Retrying to close fails because of duplicate staging repositories")," - particularly annoying because you can't fix this through automation. It happens when artifacts are uploaded multiple times and now more than one staging repository exists. You must first ",(0,r.mdx)("em",{parentName:"p"},"drop")," (not close or release) the existing ones before restarting the job."),(0,r.mdx)("p",{parentName:"li"},"Take the following steps:"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Go to ",(0,r.mdx)("a",{parentName:"li",href:"https://oss.sonatype.org/#stagingRepositories"},"Staging Repositories"),"."),(0,r.mdx)("li",{parentName:"ul"},"Select the open repositories and click 'Drop'."))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"NDK mismatch")," - if Gradle complains about a missing NDK, this usually indicates that a dependency has a hard requirement on a particular NDK. You can add it to the list in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"sdkmanager")," command.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"Artifacts not available")," - Maven Central syncs with a delay of sometimes a few hours. You can check directly on the ",(0,r.mdx)("a",{parentName:"p",href:"https://repo.maven.apache.org/maven2/com/facebook/flipper/"},"Maven2 main server")," if the artifacts with the new version number are uploaded."))))}h.isMDXComponent=!0}}]);