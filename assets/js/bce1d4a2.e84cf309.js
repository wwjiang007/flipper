"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7713],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>s});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},l.apply(this,arguments)}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=i.createContext({}),s=function(e){return function(n){var t=u(n.components);return i.createElement(e,l({},n,{components:t}))}},u=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(t),c=r,g=s["".concat(p,".").concat(c)]||s[c]||m[c]||l;return t?i.createElement(g,a(a({ref:n},d),{},{components:t})):i.createElement(g,a({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,p=new Array(l);p[0]=g;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a.mdxType="string"==typeof e?e:r,p[1]=a;for(var d=2;d<l;d++)p[d]=t[d];return i.createElement.apply(null,p)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},78531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var i=t(83117),r=t(80102),l=(t(67294),t(3905)),p=["components"],a={id:"deeplinks",title:"Using Deeplinks"},o=void 0,d={unversionedId:"extending/deeplinks",id:"extending/deeplinks",title:"Using Deeplinks",description:"Flipper supports opening Flipper through deeplinks via the flipper:// protocol.",source:"@site/../docs/extending/deeplinks.mdx",sourceDirName:"extending",slug:"/extending/deeplinks",permalink:"/docs/extending/deeplinks",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/deeplinks.mdx",tags:[],version:"current",frontMatter:{id:"deeplinks",title:"Using Deeplinks"},sidebar:"main",previous:{title:"Style Guide",permalink:"/docs/extending/style-guide"},next:{title:"Using Node.js APIs",permalink:"/docs/extending/node-apis"}},s={},u=[{value:"open-plugin",id:"open-plugin",level:2},{value:"Handling deeplinks in the plugin",id:"handling-deeplinks-in-the-plugin",level:3}],c={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,p);return(0,l.mdx)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"Flipper supports opening Flipper through deeplinks via the ",(0,l.mdx)("inlineCode",{parentName:"p"},"flipper://")," protocol."),(0,l.mdx)("h2",{id:"open-plugin"},"open-plugin"),(0,l.mdx)("p",null,"The following link format can be used to open Flipper and open a specific plugin:"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"flipper://open-plugin?plugin-id=<plugin-id>&client=<client>&devices=<devices>&payload=<payload>")),(0,l.mdx)("p",null,"The parameters are specified as follows:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"plugin-id")," - ","[required]"," the identifier of the plugin that needs to be opened, as specified by the ",(0,l.mdx)("inlineCode",{parentName:"li"},"id")," field in ",(0,l.mdx)("inlineCode",{parentName:"li"},"package.json"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"client")," - ","[optional]"," the name of the application that should be opened. For device plugins, this doesn't need to be specified. If not set, the user will be prompted to select a client."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"devices")," - ","[optional]"," comma separated list of device types that are acceptable. For example, ",(0,l.mdx)("inlineCode",{parentName:"li"},"iOS,Android")," or ",(0,l.mdx)("inlineCode",{parentName:"li"},"Metro"),". If set, ",(0,l.mdx)("inlineCode",{parentName:"li"},"client")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin-id")," must be running on this type of device."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"payload")," - ","[optional]"," any additional string argument to pass to the plugin. Note that this argument should be properly URL encoded.")),(0,l.mdx)("p",null,"Using this deeplink format ensures that:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"[FB-ONLY]"," The user is logged in & connected to Facebook."),(0,l.mdx)("li",{parentName:"ul"},"Flipper is up to date."),(0,l.mdx)("li",{parentName:"ul"},"[FB-ONLY]"," The specified plugin is installed."),(0,l.mdx)("li",{parentName:"ul"},"The plugin is available on the provided client / device, or will prompt the user for a valid device / client selection is made on which the plugin is available."),(0,l.mdx)("li",{parentName:"ul"},"The plugin is enabled.")),(0,l.mdx)("h3",{id:"handling-deeplinks-in-the-plugin"},"Handling deeplinks in the plugin"),(0,l.mdx)("p",null,"If a plugin is opened through a deeplink, for which a ",(0,l.mdx)("inlineCode",{parentName:"p"},"payload")," was set, the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/flipper-plugin#ondeeplink"},(0,l.mdx)("inlineCode",{parentName:"a"},"onDeepLink"))," handler will be triggered directly after initializing and rendering the plugin."),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"The same payload format can also be used to open other plugins programmatically from inside another plugin, by passing the payload as second argument to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/flipper-plugin#selectplugin"},"selectPlugin"),".")))}m.isMDXComponent=!0}}]);