"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6366],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,f=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(f,l(l({ref:t},s),{},{components:n})):a.createElement(f,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],l={id:"power-search",title:"Power Search",sidebar_label:"Power Search"},p=void 0,s={unversionedId:"extending/power-search",id:"extending/power-search",title:"Power Search",description:"By default, your table has a power search bar. It allows to search through the entire row as a serialized string or through individual columns. Based on the column type, power search provides different search operators for columns.",source:"@site/../docs/extending/power-search.mdx",sourceDirName:"extending",slug:"/extending/power-search",permalink:"/docs/extending/power-search",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/power-search.mdx",tags:[],version:"current",frontMatter:{id:"power-search",title:"Power Search",sidebar_label:"Power Search"},sidebar:"main",previous:{title:"Desktop Plugin API",permalink:"/docs/extending/flipper-plugin"},next:{title:"Styling Components",permalink:"/docs/extending/styling-components"}},c={},m=[{value:"Simplified config",id:"simplified-config",level:2},{value:"Advanced config",id:"advanced-config",level:2},{value:"Using legacy search",id:"using-legacy-search",level:2},{value:"Examples",id:"examples",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"By default, your ",(0,o.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-table"},"table")," has a power search bar. It allows to search through the entire row as a serialized string or through individual columns. Based on the column type, power search provides different search operators for columns.\nFor instance, for string values it can check if a string contains a substring or even matches some other string exactly. At the same time, for dates Flipper can filter out records after or before a certain date.\nSince Flipper does not have a way of identifying the column type in advance, it always assumes that every column is a string. If you want you can tell Flipper how to handle a column and what power search operators should be available."),(0,o.mdx)("h2",{id:"simplified-config"},"Simplified config"),(0,o.mdx)("p",null,"Power search provides a list of default predicates for every column data type. You can specify the column data type like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {DataTableColumn} from 'flipper-plugin'\n\ntype MyRow = {\n    timestamp: number;\n    eventType: string;\n}\n\nconst columns: DataTableColumn<MyRow>[] = [\n    {\n      key: 'timestamp',\n      title: 'Timestamp',\n      sortable: true,\n      powerSearchConfig: {type: 'dateTime'},\n    },\n    {\n        key: 'eventType',\n        title: 'Event',\n        powerSearchConfig: {type: 'enum'}\n    },\n]\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/flipper-plugin/src/ui/data-table/DataTableWithPowerSearch.tsx#L148"},'Complete list of possible "types"'),"."),(0,o.mdx)("h2",{id:"advanced-config"},"Advanced config"),(0,o.mdx)("p",null,"If the default list of predicates is not tailored enouhg for your use-case, you can provide a list of predicates explicitly."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {DataTableColumn, dataTablePowerSearchOperators} from 'flipper-plugin'\n\ntype MyRow = {\n    timestamp: number;\n    eventType: string;\n}\n\nconst EVENT_TYPE_ENUM_LABELS = {\n    yodaValue: 'Yoda Label',\n    lukeValue: 'Luke Label'\n}\n\nconst columns: DataTableColumn<MyRow>[] = [\n    {\n      key: 'timestamp',\n      title: 'Timestamp',\n      sortable: true,\n      powerSearchConfig: [\n        dataTablePowerSearchOperators.same_as_absolute_date_no_time(),\n      ]\n    },\n    {\n        key: 'eventType',\n        title: 'Event',\n        powerSearchConfig: {   \n            // You can also provide power search config as an object\n            operators: [\n                dataTablePowerSearchOperators.enum_is(EVENT_TYPE_ENUM_LABELS),\n                dataTablePowerSearchOperators.enum_is_not(EVENT_TYPE_ENUM_LABELS),\n            ],\n            // It could have exra options\n            // See https://github.com/facebook/flipper/blob/main/desktop/flipper-plugin/src/ui/data-table/DataTableWithPowerSearch.tsx#L157\n        }\n    },\n]\n")),(0,o.mdx)("h2",{id:"using-legacy-search"},"Using legacy search"),(0,o.mdx)("p",null,"While we would encourage using the new power search, some plugins might decide to stick to the legacy experience. To do that you have to use different imports from 'flipper-plugin': ",(0,o.mdx)("inlineCode",{parentName:"p"},"MasterDetailLegacy")," instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"MasterDetail"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTableLegacy")," instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTable"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTableColumnLegacy")," instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTable"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTableManagerLegacy")," instead of ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataTableManager"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {MasterDetailLegacy, DataTableColumnLegacy} from 'flipper-plugin';\n\nconst columns: DataTableColumnLegacy<MyRow>[] = [\n    // colun definition\n]\n\nexport const Component = () => {\n    return <MasterDetailLegacy columns={columns} /* ...other props */ />\n}\n")),(0,o.mdx)("h2",{id:"examples"},"Examples"),(0,o.mdx)("p",null,"You can see a live examplse of how you can provide the power search config here:"),(0,o.mdx)("ol",{start:0},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/logs/index.tsx#L49"},"Logs")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/network/index.tsx#L664"},"Network")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"https://fburl.com/code/liiu1wns"},"Intern-only"),". ")),(0,o.mdx)("p",null,"You can find the complete list of supported operators ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/flipper-plugin/src/ui/data-table/DataTableDefaultPowerSearchOperators.tsx"},"here"),"."))}u.isMDXComponent=!0}}]);