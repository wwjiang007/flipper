"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[890],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),m=function(e){return function(n){var t=p(n.components);return a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,h=m["".concat(d,".").concat(u)]||m[u]||c[u]||l;return t?a.createElement(h,r(r({ref:n},s),{},{components:t})):a.createElement(h,r({ref:n},s))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,d=new Array(l);d[0]=h;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r.mdxType="string"==typeof e?e:i,d[1]=r;for(var s=2;s<l;s++)d[s]=t[s];return a.createElement.apply(null,d)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},42881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>x,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=t(83117),i=t(80102),l=(t(67294),t(3905)),d=t(86341),r=t(39960),o=["components"],s={id:"flipper-plugin",title:"Desktop Plugin API"},m=void 0,p={unversionedId:"extending/flipper-plugin",id:"extending/flipper-plugin",title:"Desktop Plugin API",description:"PluginClient is the type of the client passed into a standard Sandy plugin.",source:"@site/../docs/extending/flipper-plugin.mdx",sourceDirName:"extending",slug:"/extending/flipper-plugin",permalink:"/docs/extending/flipper-plugin",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/flipper-plugin.mdx",tags:[],version:"current",frontMatter:{id:"flipper-plugin",title:"Desktop Plugin API"},sidebar:"main",previous:{title:"Migrating a Plugin to Sandy",permalink:"/docs/extending/sandy-migration"},next:{title:"Power Search",permalink:"/docs/extending/power-search"}},u={},c=[{value:"Properties",id:"properties",level:3},{value:"<code>device</code>",id:"device",level:4},{value:"<code>appName</code>",id:"appname",level:4},{value:"<code>appId</code>",id:"appid",level:4},{value:"<code>pluginKey</code>",id:"pluginkey",level:4},{value:"<code>connected</code>",id:"connected",level:4},{value:"<code>isConnected</code>",id:"isconnected",level:4},{value:"Events",id:"events",level:3},{value:"<code>onMessage</code>",id:"onmessage",level:4},{value:"<code>onActivate</code>",id:"onactivate",level:4},{value:"<code>onDeactivate</code>",id:"ondeactivate",level:4},{value:"<code>onConnect</code>",id:"onconnect",level:4},{value:"<code>onDisconnect</code>",id:"ondisconnect",level:4},{value:"<code>onDestroy</code>",id:"ondestroy",level:4},{value:"<code>onDeepLink</code>",id:"ondeeplink",level:4},{value:"<code>onExport</code>",id:"onexport",level:4},{value:"<code>onImport</code>",id:"onimport",level:4},{value:"<code>onUnhandledMessage</code>",id:"onunhandledmessage",level:4},{value:"<code>onServerAddOnStart</code>",id:"onserveraddonstart",level:4},{value:"<code>onServerAddOnStop</code>",id:"onserveraddonstop",level:4},{value:"<code>onServerAddOnMessage</code>",id:"onserveraddonmessage",level:4},{value:"<code>onServerAddOnUnhandledMessage</code>",id:"onserveraddonunhandledmessage",level:4},{value:"<code>onReady</code>",id:"onready",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>send</code>",id:"send",level:4},{value:"<code>addMenuEntry</code>",id:"addmenuentry",level:4},{value:"<code>isPluginAvailable</code>",id:"ispluginavailable",level:4},{value:"<code>selectPlugin</code>",id:"selectplugin",level:4},{value:"<code>supportsMethod</code>",id:"supportsmethod",level:4},{value:"<code>showNotification</code>",id:"shownotification",level:4},{value:"<code>writeTextToClipboard</code>",id:"writetexttoclipboard",level:4},{value:"<code>createPaste</code>",id:"createpaste",level:4},{value:"<code>GK</code>",id:"gk",level:4},{value:"<code>logger</code>",id:"logger",level:4},{value:"<code>sendToServerAddOn</code>",id:"sendtoserveraddon",level:4},{value:"DevicePluginClient",id:"devicepluginclient",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Events",id:"events-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"Device",id:"device-1",level:2},{value:"Properties",id:"properties-2",level:3},{value:"Events",id:"events-2",level:3},{value:"<code>onLogEntry</code>",id:"onlogentry",level:4},{value:"State Management",id:"state-management",level:2},{value:"Methods",id:"methods-2",level:3},{value:"createState",id:"createstate",level:4},{value:"Options",id:"options",level:5},{value:"The state atom object",id:"the-state-atom-object",level:5},{value:"Example",id:"example",level:5},{value:"createDataSource",id:"createdatasource",level:4},{value:"Example",id:"example-1",level:5},{value:"DataSource",id:"datasource",level:4},{value:"limit",id:"limit",level:5},{value:"view",id:"view",level:5},{value:"additionalViews",id:"additionalviews",level:5},{value:"size",id:"size",level:5},{value:"records",id:"records",level:5},{value:"get",id:"get",level:5},{value:"getById",id:"getbyid",level:5},{value:"keys",id:"keys",level:5},{value:"entries",id:"entries",level:5},{value:"Symbol.iterator",id:"symboliterator",level:5},{value:"getIndexOfKey",id:"getindexofkey",level:5},{value:"append",id:"append",level:5},{value:"update",id:"update",level:5},{value:"delete",id:"delete",level:5},{value:"deleteById",id:"deletebyid",level:5},{value:"shift",id:"shift",level:5},{value:"clear",id:"clear",level:5},{value:"getAdditionalView",id:"getadditionalview",level:5},{value:"getAllRecordsByIndex",id:"getallrecordsbyindex",level:4},{value:"DataSourceView",id:"datasourceview",level:4},{value:"datasource",id:"datasource-1",level:5},{value:"windowStart",id:"windowstart",level:5},{value:"windowEnd",id:"windowend",level:5},{value:"size",id:"size-1",level:5},{value:"isSorted",id:"issorted",level:5},{value:"isFiltered",id:"isfiltered",level:5},{value:"isRevered",id:"isrevered",level:5},{value:"output",id:"output",level:5},{value:"Symbol.iterator",id:"symboliterator-1",level:5},{value:"setWindow",id:"setwindow",level:5},{value:"setFilter",id:"setfilter",level:5},{value:"setSortBy",id:"setsortby",level:5},{value:"toggleRevered",id:"togglerevered",level:5},{value:"setReversed",id:"setreversed",level:5},{value:"reset",id:"reset",level:5},{value:"get",id:"get-1",level:5},{value:"setListener",id:"setlistener",level:5},{value:"React Hooks",id:"react-hooks",level:2},{value:"Methods",id:"methods-3",level:3},{value:"usePlugin",id:"useplugin",level:4},{value:"useValue",id:"usevalue",level:4},{value:"useLogger",id:"uselogger",level:4},{value:"useTrackedCallback",id:"usetrackedcallback",level:4},{value:"useMemoize",id:"usememoize",level:4},{value:"useLocalStorageState",id:"uselocalstoragestate",level:4},{value:"UI components",id:"ui-components",level:2},{value:"Layout.*",id:"layout",level:3},{value:"HighlightContext",id:"highlightcontext",level:3},{value:"HighlightProvider",id:"highlightprovider",level:3},{value:"useHighlighter",id:"usehighlighter",level:3},{value:"PowerSearch",id:"powersearch",level:3},{value:"DataTable",id:"datatable",level:3},{value:"DataFormatter",id:"dataformatter",level:3},{value:"DataInspector",id:"datainspector",level:3},{value:"DataDescription",id:"datadescription",level:3},{value:"MarkerTimeline",id:"markertimeline",level:3},{value:"ElementsInspector",id:"elementsinspector",level:3},{value:"ElementAttribute",id:"elementattribute",level:3},{value:"ElementData",id:"elementdata",level:3},{value:"ElementExtraInfo",id:"elementextrainfo",level:3},{value:"ElementID",id:"elementid",level:3},{value:"ElementSearchResultSet",id:"elementsearchresultset",level:3},{value:"ElementsInspectorElement",id:"elementsinspectorelement",level:3},{value:"ElementsInspectorProps",id:"elementsinspectorprops",level:3},{value:"TimelineDataDescription",id:"timelinedatadescription",level:3},{value:"dataTablePowerSearchOperators",id:"datatablepowersearchoperators",level:3},{value:"MasterDetailLegacy",id:"masterdetaillegacy",level:3},{value:"DataTableLegacy",id:"datatablelegacy",level:3},{value:"MasterDetail",id:"masterdetail",level:3},{value:"Panel",id:"panel",level:3},{value:"Tabs",id:"tabs",level:3},{value:"Tab",id:"tab",level:3},{value:"Toolbar",id:"toolbar",level:3},{value:"CodeBlock",id:"codeblock",level:3},{value:"DataList",id:"datalist",level:3},{value:"Dialog",id:"dialog",level:3},{value:"Spinner",id:"spinner",level:3},{value:"NUX",id:"nux",level:3},{value:"FileSelector",id:"fileselector",level:3},{value:"DetailSidebar",id:"detailsidebar",level:3},{value:"Tracked",id:"tracked",level:3},{value:"TrackingScope",id:"trackingscope",level:3},{value:"withTrackingScope",id:"withtrackingscope",level:3},{value:"theme object",id:"theme-object",level:3},{value:"Utilities",id:"utilities",level:2},{value:"suggestNewPlugin",id:"suggestnewplugin",level:3},{value:"getFlipperLib",id:"getflipperlib",level:3},{value:"createTablePlugin",id:"createtableplugin",level:3},{value:"batched",id:"batched",level:3},{value:"batch",id:"batch",level:3},{value:"produce",id:"produce",level:3},{value:"renderReactRoot",id:"renderreactroot",level:3},{value:"sleep",id:"sleep",level:3},{value:"timeout",id:"timeout",level:3},{value:"styled",id:"styled",level:3},{value:"textContent",id:"textcontent",level:3},{value:"path",id:"path",level:3},{value:"<code>path.basename(path[, ext])</code>",id:"pathbasenamepath-ext",level:4},{value:"<code>path.extname(path)</code>",id:"pathextnamepath",level:4},{value:"<code>path.join([...paths])</code>",id:"pathjoinpaths",level:4},{value:"<code>path.normalize(path)</code>",id:"pathnormalizepath",level:4},{value:"uuid",id:"uuid",level:3},{value:"safeStringify",id:"safestringify",level:3},{value:"createControlledPromise",id:"createcontrolledpromise",level:3},{value:"isAtom",id:"isatom",level:3},{value:"reportPluginFailures",id:"reportpluginfailures",level:3},{value:"tryCatchReportPluginFailures",id:"trycatchreportpluginfailures",level:3},{value:"tryCatchReportPluginFailuresAsync",id:"trycatchreportpluginfailuresasync",level:3},{value:"TestUtils",id:"testutils",level:2},{value:"Starting a plugin",id:"starting-a-plugin",level:3},{value:"startPlugin options",id:"startplugin-options",level:4},{value:"The test runner object",id:"the-test-runner-object",level:4}],h={toc:c};function x(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.mdx)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"PluginClient")," is the type of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"client")," passed into a standard Sandy plugin."),(0,l.mdx)("p",null,"It takes two generic arguments:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Event")," - mapping of an event name to the data structure of the payload, as explained in the ",(0,l.mdx)("a",{parentName:"li",href:"/docs/tutorial/js-custom#the-plugin-declaration"},"Tutorial"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Methods")," - used to describe the methods that are offered by the plugin implementation on the device. 'Methods' is a mapping of a method name to a function that describes the signature of a method. The first argument of that function describes the parameters that can be passed to the client. The return type of the function describes what is returned from the client. Wrapped with a ",(0,l.mdx)("inlineCode",{parentName:"li"},"Promise"),".")),(0,l.mdx)("p",null,"Following is a short example of how the above arguments can be used:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type LogEntry = {\n  message: string\n}\n\n// Events that can be send by the client implementation:\ntype Events = {\n  addLogEntry: LogEntry,\n  flushLogs: {},\n}\n\n// Methods we can invoke on the client:\ntype Methods = {\n  retrieveLogsSince(params: { since: number }): Promise<{ message: string }>,\n}\n\nexport function plugin(client: PluginClient<Events, Methods>) {\n  // etc\n}\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"PluginClient")," received by the ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," exposes the following members, which are detailed in the following sub-sections."),(0,l.mdx)("h3",{id:"properties"},"Properties"),(0,l.mdx)("h4",{id:"device"},(0,l.mdx)("inlineCode",{parentName:"h4"},"device")),(0,l.mdx)("p",null,"Returns the ",(0,l.mdx)("a",{parentName:"p",href:"#device"},"Device")," this plugin is connected to."),(0,l.mdx)("h4",{id:"appname"},(0,l.mdx)("inlineCode",{parentName:"h4"},"appName")),(0,l.mdx)("p",null,"The name of the application, for example 'Facebook', 'Instagram' or 'Slack'."),(0,l.mdx)("h4",{id:"appid"},(0,l.mdx)("inlineCode",{parentName:"h4"},"appId")),(0,l.mdx)("p",null,"A string that uniquely identifies the current application and is based on a combination of the application name and device serial on which the application is running."),(0,l.mdx)("h4",{id:"pluginkey"},(0,l.mdx)("inlineCode",{parentName:"h4"},"pluginKey")),(0,l.mdx)("p",null,"A key that uniquely identifies this plugin instance and captures the current device/client/plugin combination."),(0,l.mdx)("h4",{id:"connected"},(0,l.mdx)("inlineCode",{parentName:"h4"},"connected")),(0,l.mdx)("h4",{id:"isconnected"},(0,l.mdx)("inlineCode",{parentName:"h4"},"isConnected")),(0,l.mdx)("p",null,"Returns whether there is currently an active connection; 'true' for any of the following:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"The device is still connected."),(0,l.mdx)("li",{parentName:"ol"},"The client is still connected."),(0,l.mdx)("li",{parentName:"ol"},"The plugin is currently selected by the user ",(0,l.mdx)("em",{parentName:"li"},"or")," the plugin is running in the background.")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"connected")," field provides the atom that can be used in combination with ",(0,l.mdx)("inlineCode",{parentName:"p"},"useValue")," to subscribe to future updates in a component.\nIn contrast, ",(0,l.mdx)("inlineCode",{parentName:"p"},"isConnected")," returns a boolean that merely captures the current state."),(0,l.mdx)("h3",{id:"events"},"Events"),(0,l.mdx)("h4",{id:"onmessage"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onMessage")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onMessage(event: string, callback: (params) => void)")),(0,l.mdx)("p",null,"Subscribes the plugin to a specific event that is fired from the client plugin (using ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#push-data-to-the-desktop"},"connection.send"),").\nTypically used to update some of the ",(0,l.mdx)("a",{parentName:"p",href:"#createstate"},"state"),".\nFor background plugins that are currently not active in the UI, messages won't arrive immediately, but are queued until the user opens the plugin."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type Events = {\n  newRow: {\n    id: number;\n    title: string;\n    url: string;\n  };\n};\n\nexport function plugin(client: PluginClient<Events, {}>) {\n  const rows = createState<Record<string, Row>>({}, {persist: 'rows'});\n\n  client.onMessage('newRow', (row /* type will be inferred correctly */) => {\n    rows.update((draft) => {\n      draft[row.id] = row;\n    });\n  });\n\n  // etc\n}\n")),(0,l.mdx)("p",null,"The Flipper Sample application contains a plugin that demonstrates these API, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#bi-directional-communication-demo"},"bi-directional-communication-demo"),"."),(0,l.mdx)("h4",{id:"onactivate"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onActivate")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onActivate(callback: () => void)")),(0,l.mdx)("p",null,"Called when the plugin is selected by the user and mounted into the Flipper Desktop UI. See also the closely related ",(0,l.mdx)("a",{parentName:"p",href:"#onconnect"},"onConnect")," event. Unlike ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"onActivate"),"  triggers for archived / imported devices."),(0,l.mdx)("h4",{id:"ondeactivate"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onDeactivate")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onDeactivate(callback: () => void)")),(0,l.mdx)("p",null,"Triggered when the plugin is unmounted from the Flipper Desktop UI because the user navigates to some other plugin. In the case the plugin is destroyed while being active, onDeactivate will still be called."),(0,l.mdx)("h4",{id:"onconnect"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onConnect")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onConnect(callback: () => void)")),(0,l.mdx)("p",null,"Triggered once the connection with the plugin on the client is established, and, for example, ",(0,l.mdx)("a",{parentName:"p",href:"#send"},"send")," can be called safely.\nTypically, this occurs  when the plugin is activated (opened) in the Flipper Desktop.\nHowever, for ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#background-plugins"},"background plugins"),", this happens immediately after the plugin has been instantiated.\nThis lifecycle is never triggered for archived / imported devices,"),(0,l.mdx)("h4",{id:"ondisconnect"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onDisconnect")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onDisconnect(callback: () => void)")),(0,l.mdx)("p",null,"Triggered once the connection with the plugin on the client has been lost.\nTypically, this occurs when the user leaves the plugin in the Flipper Desktop, when the plugin is disabled, or when the app or device has disconnected.\nHowever, for ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#background-plugins"},"background plugins"),", this event won't fire when the user merely navigates somewhere else.  In that case, ",(0,l.mdx)("a",{parentName:"p",href:"#ondeactivate"},"onDeactivate")," can be used instead."),(0,l.mdx)("h4",{id:"ondestroy"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onDestroy")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onDestroy(callback: () => void)")),(0,l.mdx)("p",null,"Called when the plugin is unloaded. This happens if the device or client has been disconnected, or when the user disables the plugin.\nNote that there is no corresponding ",(0,l.mdx)("inlineCode",{parentName:"p"},"onCreate")," event, since the function body of the plugin definition acts already as 'what needs to be done when the plugin is loaded/enabled'."),(0,l.mdx)("h4",{id:"ondeeplink"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onDeepLink")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onDeepLink(callback: (payload: unknown) => void)")),(0,l.mdx)("p",null,"Triggerred when the users navigates to this plugin using a deeplink, either from an external ",(0,l.mdx)("inlineCode",{parentName:"p"},"flipper://")," plugin URL, or because the user was linked here from another plugin."),(0,l.mdx)("h4",{id:"onexport"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onExport")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onExport(callback: (idler, onStatusMessage) => Promise<state>)")),(0,l.mdx)("p",null,"Overrides the default serialization behavior of this plugin. Should return a promise with persistable state that is to be stored, or nothing at all. This process is async, so it is possible to first fetch some additional state from the device."),(0,l.mdx)("p",null,"Serializable is defined as 'non-cyclic data, consisting purely of primitive values, plain objects, arrays or Date, Set or Map objects'."),(0,l.mdx)("p",null,"If nothing is returned, the handler will be run, and after the handler has finished the ",(0,l.mdx)("inlineCode",{parentName:"p"},"persist")," keys of the different states will be used as export basis."),(0,l.mdx)("h4",{id:"onimport"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onImport")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onImport(callback: (snapshot) => void)")),(0,l.mdx)("p",null,"Overrides the default de-serialization behavior of this plugin. Use it to update the state based on the snapshot data. This hook will be called immediately after constructing the plugin instance."),(0,l.mdx)("p",null,"To synchonize the types of the data between ",(0,l.mdx)("inlineCode",{parentName:"p"},"onImport")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"onExport"),", it's possible to provide a type as generic to both hooks. The next example stores ",(0,l.mdx)("inlineCode",{parentName:"p"},"counter")," under the ",(0,l.mdx)("inlineCode",{parentName:"p"},"count")," field and stores it as string rather than as number."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},'type SerializedState = {\n  count: string;\n}\n\nexport function plugin(client: PluginClient) {\n  const counter = createState(0);\n\n  client.onExport<SerializedState>(() => {\n    return {\n      count: "" + counter.get()\n    }\n  })\n\n  client.onImport<SerializedState>((data) => {\n    counter.set(parseInt(data.count, 10));\n  });\n}\n')),(0,l.mdx)("h4",{id:"onunhandledmessage"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onUnhandledMessage")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onUnhandledMessage(callback: (event: string, params) => void)")),(0,l.mdx)("p",null,"This method subscribes to all messages arriving from the devices which is not handled by an ",(0,l.mdx)("inlineCode",{parentName:"p"},"onMessage")," handler.\nThis handler is untyped, and onMessage should be favored over using onUnhandledMessage if the event name is known upfront."),(0,l.mdx)("h4",{id:"onserveraddonstart"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onServerAddOnStart")),(0,l.mdx)("blockquote",null,(0,l.mdx)("p",{parentName:"blockquote"},"Experimental!")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onServerAddOnStart(callback: () => void)")),(0,l.mdx)("p",null,"Triggered when a server add-on starts.\nYou should send messages to the server add-on only after it connects.\nDo not forget to stop all communication when the add-on stops."),(0,l.mdx)("h4",{id:"onserveraddonstop"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onServerAddOnStop")),(0,l.mdx)("blockquote",null,(0,l.mdx)("p",{parentName:"blockquote"},"Experimental!")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onServerAddOnStop(callback: () => void)")),(0,l.mdx)("p",null,"Triggered when a server add-on stops.\nYou should stop all communication with the server add-on when the add-on stops."),(0,l.mdx)("h4",{id:"onserveraddonmessage"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onServerAddOnMessage")),(0,l.mdx)("blockquote",null,(0,l.mdx)("p",{parentName:"blockquote"},"Experimental!")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onServerAddOnMessage(event: string, callback: (params) => void)")),(0,l.mdx)("p",null,"This subscribes the plugin to a specific event that is fired from the server add-on."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type ServerAddOnEvents = {\n  newRow: {\n    id: number;\n    title: string;\n    url: string;\n  };\n};\n\nexport function plugin(client: PluginClient<{}, {}, ServerAddOnEvents>) {\n  const rows = createState<Record<string, Row>>({}, {persist: 'rows'});\n\n  client.onServerAddOnMessage('newRow', (row /* type will be inferred correctly */) => {\n    rows.update((draft) => {\n      draft[row.id] = row;\n    });\n  });\n\n  // etc\n}\n")),(0,l.mdx)("h4",{id:"onserveraddonunhandledmessage"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onServerAddOnUnhandledMessage")),(0,l.mdx)("blockquote",null,(0,l.mdx)("p",{parentName:"blockquote"},"Experimental!")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.onServerAddOnUnhandledMessage(callback: (event: string, params) => void)")),(0,l.mdx)("p",null,"Subscribe to all messages arriving from the server add-ons not handled by another listener.\nThis handler is untyped, and onMessage should be favored over using onUnhandledMessage if the event name is known upfront."),(0,l.mdx)("h4",{id:"onready"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onReady")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"onReady")," event is triggered immediately after a plugin has been initialized and any pending state was restored.\nThis event fires after ",(0,l.mdx)("inlineCode",{parentName:"p"},"onImport")," / the interpretation of any ",(0,l.mdx)("inlineCode",{parentName:"p"},"persist")," flags and indicates that the initialization process has finished.\nThis event does not signal that the plugin is loaded in the UI yet (see ",(0,l.mdx)("inlineCode",{parentName:"p"},"onActivated"),") and does fire before deeplinks (see ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDeeplink"),") are handled.\nIf a plugin has complex initialization logic it is recommended to put it in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onReady")," hook, as an error in the onReady hook won't cause the plugin not to be loaded."),(0,l.mdx)("h3",{id:"methods"},"Methods"),(0,l.mdx)("h4",{id:"send"},(0,l.mdx)("inlineCode",{parentName:"h4"},"send")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.send(method: string, params: object): Promise<object>")),(0,l.mdx)("p",null,"If the plugin is connected, ",(0,l.mdx)("inlineCode",{parentName:"p"},"send")," can be used to invoke a ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#background-plugins"},"method")," on the client implementation of the plugin."),(0,l.mdx)("p",null,"Note that if ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.isConnected")," returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"false"),", calling ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.send")," will throw an exception. This is the case if for example the connection with the device or application was lost.\nGenerally, one should guard ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.send")," calls with a check to ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.isConnected"),"."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type Methods = {\n  currentLogs(params: {since: number}): Promise<string[]>;\n};\n\nexport function plugin(client: PluginClient<{}, Methods>) {\n  const logs = createState<string[]>([])\n\n  client.onConnect(async () => {\n    try {\n      const currentLogs = await client.send('currentLogs', {\n        since: Date.now()\n      })\n      logs.set(currentLogs)\n    } catch (e) {\n      console.error(\"Failed to retrieve current logs: \", e)\n    }\n  })\n\n  //etc\n}\n")),(0,l.mdx)("p",null,"The Flipper Sample application contains a plugin that demonstrates these API, see ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/create-plugin#bi-directional-communication-demo"},"bi-directional-communication-demo"),"."),(0,l.mdx)("h4",{id:"addmenuentry"},(0,l.mdx)("inlineCode",{parentName:"h4"},"addMenuEntry")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.addMenuEntry(...entry: MenuEntry[])")),(0,l.mdx)("p",null,"This method can be used to add menu entries to the Flipper main menu while this plugin is active.\nIt supports registering global keyboard shortcuts as well.\nExample:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"client.addMenuEntry({\n    label: 'Reset Selection',\n    accelerator: 'CmdOrCtrl+R'\n    handler: () => {\n      // Event handling\n    }\n}\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"accelerator")," argument is optional but describes the keyboard shortcut."),(0,l.mdx)("p",null,"It is possible to leave out the ",(0,l.mdx)("inlineCode",{parentName:"p"},"label"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"accelerator")," fields if a pre-defined ",(0,l.mdx)("inlineCode",{parentName:"p"},"action")," is set, which configures all three of them.\nThe currently pre-defined actions are ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Clear"'),", ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Go To Bottom"')," and ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Create Paste"'),".\nExample of using a pre-defined action:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"client.addMenuEntry({\n  action: 'createPaste',\n  handler: async () => {\n    // Event handling\n  }\n})\n")),(0,l.mdx)("h4",{id:"ispluginavailable"},(0,l.mdx)("inlineCode",{parentName:"h4"},"isPluginAvailable")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"isPluginAvailable(pluginId: string): boolean")),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if a plugin with the given id is available by for consumption, that is: supported by the current application / device and enabled by the user."),(0,l.mdx)("h4",{id:"selectplugin"},(0,l.mdx)("inlineCode",{parentName:"h4"},"selectPlugin")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"selectPlugin(pluginId: string, deeplinkPayload?: unknown): void")),(0,l.mdx)("p",null,"Opens a different plugin by id, optionally providing a deeplink to bring the target plugin to a certain state."),(0,l.mdx)("h4",{id:"supportsmethod"},(0,l.mdx)("inlineCode",{parentName:"h4"},"supportsMethod")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.supportsMethod(method: string): Promise<Boolean>")),(0,l.mdx)("p",null,"Method must be called within ",(0,l.mdx)("a",{parentName:"p",href:"#onconnect"},"onConnect"),", otherwise will throw error."),(0,l.mdx)("p",null,"Resolves to true if the client supports the specified method. Useful when adding functionality to existing plugins, when connectivity to older clients is still required. Also useful when client plugins are implemented on multiple platforms and don't all have feature parity."),(0,l.mdx)("h4",{id:"shownotification"},(0,l.mdx)("inlineCode",{parentName:"h4"},"showNotification")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.showNotification(notification)")),(0,l.mdx)("p",null,"Shows an urgent, system wide notification, that will also be registered in Flipper's notification pane.\nFor on-screen notifications, we recommend using either the ",(0,l.mdx)("inlineCode",{parentName:"p"},"message")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"notification")," API from ",(0,l.mdx)("inlineCode",{parentName:"p"},"antd")," directly."),(0,l.mdx)("p",null,"Clicking the notification will open the sending plugin. If the ",(0,l.mdx)("inlineCode",{parentName:"p"},"action")," id is set, it will be used as deeplink."),(0,l.mdx)("p",null,"The notification interface is defined as:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"interface Notification {\n  id: string;\n  title: string;\n  message: string | React.ReactNode;\n  severity: 'warning' | 'error';\n  timestamp?: number;\n  category?: string;\n  action?: string;\n};\n")),(0,l.mdx)("h4",{id:"writetexttoclipboard"},(0,l.mdx)("inlineCode",{parentName:"h4"},"writeTextToClipboard")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"writeTextToClipboard(text: string)")),(0,l.mdx)("p",null,"Writes text to the OS-level clipboard."),(0,l.mdx)("h4",{id:"createpaste"},(0,l.mdx)("inlineCode",{parentName:"h4"},"createPaste")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"This is a Facebook only method.")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.createPaste(value: string): Promise<string|undefined>")),(0,l.mdx)("p",null,"Creates a Facebook Paste (similar to a GitHub Gist) for the given ",(0,l.mdx)("inlineCode",{parentName:"p"},"value"),".\nThe returned promise either contains a string with the URL of the paste, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"undefined")," if the process failed.\nDetails of the failure will be communicated back directly to the user through Flipper notifications. For example,  if the user is currently not signed in."),(0,l.mdx)("h4",{id:"gk"},(0,l.mdx)("inlineCode",{parentName:"h4"},"GK")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"This is a Facebook only method.")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.GK(gatekeeper: string): boolean")),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if the current user is part of the given GK. ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," in all other cases."),(0,l.mdx)(d.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("p",null,"To use a gatekeeper in the Facebook build of Flipper:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/gatekeeper/"},"Create the gatekeeper"),"."),(0,l.mdx)("li",{parentName:"ol"},"Add the Gatekeepers name to the ",(0,l.mdx)("inlineCode",{parentName:"li"},"subscribedGatekeepers")," array in ",(0,l.mdx)("inlineCode",{parentName:"li"},"fbsource/xplat/sonar/desktop/src/fb/GK.tsx"),"."),(0,l.mdx)("li",{parentName:"ol"},"Use ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.GK('name_of_gk')")," to read the gatekeeper, or alternatively: ",(0,l.mdx)("inlineCode",{parentName:"li"},"import {GK} from 'flipper'; GK.get('name_of_gk')"),".")),(0,l.mdx)("p",null,"The gatekeepers are cached in ",(0,l.mdx)("inlineCode",{parentName:"p"},"localStorage"),". Therefore, you might get the cached result of the gatekeeper on the first access (which defaults to ",(0,l.mdx)("inlineCode",{parentName:"p"},"false"),"). On the next start of the app, you will get the new result.")),(0,l.mdx)("h4",{id:"logger"},(0,l.mdx)("inlineCode",{parentName:"h4"},"logger")),(0,l.mdx)("p",null,"Logger instance that logs information to the console, but also to the internal logging (in FB only builds) and which can be used to track performance (see ",(0,l.mdx)("a",{parentName:"p",href:"#uselogger"},"useLogger"),")."),(0,l.mdx)("h4",{id:"sendtoserveraddon"},(0,l.mdx)("inlineCode",{parentName:"h4"},"sendToServerAddOn")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"client.sendToServerAddOn(method: string, params: object): Promise<object>")),(0,l.mdx)("p",null,"Send a message to the server add-on."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type ServerAddOnMethods = {\n  currentLogs(params: {since: number}): Promise<string[]>;\n};\n\nexport function plugin(client: PluginClient<{}, {}, {}, ServerAddOnMethods}>) {\n  const logs = createState<string[]>([])\n\n  client.onServerAddOnStart(async () => {\n    try {\n      const currentLogs = await client.sendToServerAddOn('currentLogs', {\n        since: Date.now()\n      })\n      logs.set(currentLogs)\n    } catch (e) {\n      console.error(\"Failed to retrieve current logs: \", e)\n    }\n  })\n\n  //etc\n}\n")),(0,l.mdx)("p",null,"For an example of how to use server add-ons, see the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/reactdevtools/index.tsx"},"React DevTools plugin"),"."),(0,l.mdx)("h2",{id:"devicepluginclient"},"DevicePluginClient"),(0,l.mdx)("h3",{id:"properties-1"},"Properties"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"device")," - returns the ",(0,l.mdx)("a",{parentName:"li",href:"#device"},"Device")," this plugin is connected to.")),(0,l.mdx)("h3",{id:"events-1"},"Events"),(0,l.mdx)("p",null,"The following DevicePluginClient events are identical to those with the same name for the PluginClient (each of the following events links to the relative PluginClient description):"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#ondestroy"},"onDestroy")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onactivate"},"onActivate")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#ondeactivate"},"onDeactivate")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#ondeeplink"},"onDeepLink")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onexport"},"onExport")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onimport"},"onImport")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onserveraddonstart"},"onServerAddOnStart")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onserveraddonstop"},"onServerAddOnStop")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onserveraddonmessage"},"onServerAddOnMessage")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#onserveraddonunhandledmessage"},"onServerAddOnUnhandledMessage"))),(0,l.mdx)("h3",{id:"methods-1"},"Methods"),(0,l.mdx)("p",null,"The following DevicePluginClient methods are identical to those with the same name for the PluginClient (each of the following methods links to the relative PluginClient description):"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#addmenuentry"},"addMenuEntry")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#createpaste"},"createPaste")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#shownotification"},"showNotification")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#ispluginavailable"},"isPluginAvailable")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#selectplugin"},"selectPlugin")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#sendtoserveraddon"},"sendToServerAddOn"))),(0,l.mdx)("h2",{id:"device-1"},"Device"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"Device")," captures the metadata of the device the plugin is currently connected to."),(0,l.mdx)("p",null,"Device objects are passed into the ",(0,l.mdx)("inlineCode",{parentName:"p"},"supportsDevice")," method of a device plugin and are available as the ",(0,l.mdx)("inlineCode",{parentName:"p"},"device")," field on a ",(0,l.mdx)("a",{parentName:"p",href:"#devicepluginclient"},"DevicePluginClient")),(0,l.mdx)("h3",{id:"properties-2"},"Properties"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:"left"},"Property"),(0,l.mdx)("th",{parentName:"tr",align:"left"},"Datatype"),(0,l.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,l.mdx)("th",{parentName:"tr",align:"left"},"Values"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"os")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"String"),(0,l.mdx)("td",{parentName:"tr",align:"left"},"Operating System of the device."),(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"'iOS'"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"'Android'"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"'Windows'"),",",(0,l.mdx)("inlineCode",{parentName:"td"},"'MacOS'"),", or ",(0,l.mdx)("inlineCode",{parentName:"td"},"'Metro'"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"deviceType")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"String"),(0,l.mdx)("td",{parentName:"tr",align:"left"},"Whether the device is a physical device or an emulator."),(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"'emulator'")," or ",(0,l.mdx)("inlineCode",{parentName:"td"},"'physical'"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"isArchived")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"Boolean"),(0,l.mdx)("td",{parentName:"tr",align:"left"},"A flag: ",(0,l.mdx)("inlineCode",{parentName:"td"},"true")," indicates the current device is coming from an import Flipper snapshot, and not an actually connected device."),(0,l.mdx)("td",{parentName:"tr",align:"left"},"True or False")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"isConnected")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"Boolean"),(0,l.mdx)("td",{parentName:"tr",align:"left"},"A flag: ",(0,l.mdx)("inlineCode",{parentName:"td"},"true")," indicates the connection to the device is still alive."),(0,l.mdx)("td",{parentName:"tr",align:"left"},"True or False")))),(0,l.mdx)("h3",{id:"events-2"},"Events"),(0,l.mdx)("h4",{id:"onlogentry"},(0,l.mdx)("inlineCode",{parentName:"h4"},"onLogEntry")),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"device.onLogEntry(callback: (logEntry: DeviceLogEntry) => void)")),(0,l.mdx)("p",null,"Use this event to subscribe to the log stream that is emitted by the device.  For Android, this is using ",(0,l.mdx)("inlineCode",{parentName:"p"},"adb")," behind the scenes, for iOS ",(0,l.mdx)("inlineCode",{parentName:"p"},"idb"),", for Metro it connects to the webserver for the Metro log output, etc."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"DeviceLogEntry")," exposes the following fields:"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:"left"},"Field"),(0,l.mdx)("th",{parentName:"tr",align:"left"},"Datatype"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"date")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"Date")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"type")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"string")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"message")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"string")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"pid")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"number")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"tid")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"number")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"app")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"string")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:"left"},(0,l.mdx)("inlineCode",{parentName:"td"},"tag")),(0,l.mdx)("td",{parentName:"tr",align:"left"},"string")))),(0,l.mdx)("p",null,"Possible values for ",(0,l.mdx)("inlineCode",{parentName:"p"},"type")," are: ",(0,l.mdx)("inlineCode",{parentName:"p"},"'unknown'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'verbose'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'debug'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'info'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'warn'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'error'"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"'fatal'"),"."),(0,l.mdx)("h2",{id:"state-management"},"State Management"),(0,l.mdx)("p",null,"State in Sandy plugins is stored in small containers that hold immutable values and can be consumed in React components using the ",(0,l.mdx)("a",{parentName:"p",href:"#usevalue"},"useValue")," hook."),(0,l.mdx)("h3",{id:"methods-2"},"Methods"),(0,l.mdx)("h4",{id:"createstate"},"createState"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState<T>(initialValue: T, options?): StateAtom<T>")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState")," method can be used to create a small state container that lives inside a Sandy plugin.\nIts value should be treated as immutable and is initialized by default using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"initialValue")," parameter."),(0,l.mdx)("h5",{id:"options"},"Options"),(0,l.mdx)("p",null,"Optionally, ",(0,l.mdx)("inlineCode",{parentName:"p"},"options")," can be provided when creating state. Supported options:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"persist: string")," - if the ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," value is set, this state container is serialized when a Flipper snapshot export is being made. When a snapshot is imported into Flipper, and plugins are initialized, this state container loads its initial value from the snapshot, rather than using the ",(0,l.mdx)("inlineCode",{parentName:"li"},"initialValue")," parameter. The ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," key should be unique within the plugin and only be set if the state stored in this container is serializable and won't become unreasonably large. See also ",(0,l.mdx)("inlineCode",{parentName:"li"},"exportState")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"initialState")," in the ",(0,l.mdx)("a",{parentName:"li",href:"#testutils"},"TestUtils")," section of the 'Utlities' page."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"persistToLocalStorage: boolean")," - indicates if this option is set in combination with the ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," option. The atom stores its state in local storage instead of as part of the plugin import / export. State stored in local storage is shared between the same plugin across multiple clients/ devices, but not actively synced.")),(0,l.mdx)("p",null,"Serializable is defined as: non-cyclic data, consisting purely of primitive values, plain objects and arrays. Precisely as the root, ",(0,l.mdx)("inlineCode",{parentName:"p"},"Date"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"Set")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"Map")," objects are allowed as well but shouldn't appear deeper in the tree."),(0,l.mdx)("h5",{id:"the-state-atom-object"},"The state atom object"),(0,l.mdx)("p",null,"A state atom object is returned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState"),", exposing the following methods:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"get(): T")," - returns the current value stored. If you want to use the atom object in a React component, consider using the ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue")," hook instead, to make sure the component is notified about future updates of this atom."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"set(newValue: T)")," - stores a new value into the atom.  If the new value is not reference-equal to the previous one, all observing components are notified."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"update(updater: (draft: Draft<T>) => void)")," - updates the current state using an ",(0,l.mdx)("a",{parentName:"li",href:"https://immerjs.github.io/immer/"},"Immer")," recipe. In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"updater"),", the ",(0,l.mdx)("inlineCode",{parentName:"li"},"draft")," object can be safely (deeply) mutated. Once the ",(0,l.mdx)("inlineCode",{parentName:"li"},"updater")," finishes, Immer will compute a new immutable object based on the changes, and store that. This is often simpler than using a combination of ",(0,l.mdx)("inlineCode",{parentName:"li"},"get")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"set")," if deep updates need to be made to the stored object."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"subscribe(listener: (value: T, prevValue: T) => void): () => void")," - subscribes a listener function to the state updates. The Listener function receives the next and previous value on each update. The method also returns function which can be called to unsubscribe the listener from further updates."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"unsubscribe(listener: (value: T, prevValue: T) => void): void")," - unsubscribes a listener function from the state updates if it was subscribed before.")),(0,l.mdx)("h5",{id:"example"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"import {createState} from 'flipper-plugin'\n\nconst rows = createState<string[]>([], {persist: 'rows'});\nconst selectedID = createState<string | null>(null, {persist: 'selection'});\n\n// Listener is called on each rows.set() and rows.update() call until unsubscribed.\nconst unsubscribe = rows.subscribe((value, prevValue) => {\n  console.log(`Rows state updated. New length: ${value.length}. Prev length: ${prevValue.length}.`);\n});\nrows.set([\"hello\"]) // Listener will be notified about the change\nconsole.log(rows.get().length) // 1\nunsubscribe(); // Do not notify listener anymore\nrows.update(draft => { // Listener won't be notified about the change\n  draft.push(\"world\")\n})\nconsole.log(rows.get().length) // 2\n")),(0,l.mdx)("h4",{id:"createdatasource"},"createDataSource"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"createDataSource<T>(initialSet?: T[], options?): DataSource<T>")),(0,l.mdx)("p",null,"Most Flipper plugins follow the basic concept of receiving events from the device, store them, and being able to tail, filter and search them.\nTo optimise for this situation, there is a dedicated ",(0,l.mdx)("inlineCode",{parentName:"p"},"createDataSource")," abstraction which creates a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource"),".\n",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," is a data collection that is heavily optimized for ",(0,l.mdx)("inlineCode",{parentName:"p"},"append")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"update"),",\nwhich stores items based on insertion order, but also allows for efficient by-id lookups."),(0,l.mdx)("p",null,"Each ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," exposes a default ",(0,l.mdx)("inlineCode",{parentName:"p"},"view")," property, which contains a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView"),".\nA ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," is a materialized view that can be sorted, filtered and windowed, and is kept incrementally up to date with the underlying ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource"),"."),(0,l.mdx)("p",null,"When using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable")," component, this ",(0,l.mdx)("inlineCode",{parentName:"p"},"view")," will be managed by the table automatically, giving plugin users the capability to freely sort, filter, search and tail your datasource.\nAlternatively, you could also pass in a different view(like from additionalViews) to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable")," component which allows for different filters, searches, etc. than the default ",(0,l.mdx)("inlineCode",{parentName:"p"},"view"),"."),(0,l.mdx)("p",null,"Valid ",(0,l.mdx)("inlineCode",{parentName:"p"},"options")," are:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"key")," - if a key is set, the given field of the records is assumed to be unique, and its value can be used to perform lookups and upserts."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"limit")," - the maximum number of records that this DataSource will store. If the limit is exceeded, the oldest records will automatically be dropped to make place for the new ones. Defaults to 100.000 records."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," - see the ",(0,l.mdx)("inlineCode",{parentName:"li"},"createState")," ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," option: If set, this data source will automatically be part of Flipper imports / exports; it's recommended to set this option."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"indices")," - If set, secondary indices will be maintained for this table that allows fast lookups. Indices is an array of keys with 1 or more items. See ",(0,l.mdx)("inlineCode",{parentName:"li"},"getAllRecordsByIndex")," for more details.")),(0,l.mdx)("p",null,"All records stored in a data source should be treated as being immutable. To update a record, replace it with a new value using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"update")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"upsert")," operations."),(0,l.mdx)("h5",{id:"example-1"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"export function devicePlugin(client: DevicePluginClient) {\n  const rows = createDataSource<ExtendedLogEntry>([], {\n    limit: 200000,\n    persist: 'logs',\n  });\n\n  client.device.onLogEntry(entry => {\n    rows.append(entry);\n  });\n\n  return {\n    rows,\n  }\n}\n")),(0,l.mdx)("h4",{id:"datasource"},"DataSource"),(0,l.mdx)("p",null,"Stores large amounts of records efficiently. For an introducrion, see ",(0,l.mdx)("a",{parentName:"p",href:"#createdatasource"},"createDataSource"),"."),(0,l.mdx)("h5",{id:"limit"},"limit"),(0,l.mdx)("p",null,"The maximum number of records that can be stored in this DataSource to constrain memory usage. Defaults to 100.000 rows. If the limit is exceeded, the oldest 10% of records is dropped. This field is writable but does not immediately truncate if changed."),(0,l.mdx)("h5",{id:"view"},"view"),(0,l.mdx)("p",null,"Returns the currently active default view on the data source. Note that be default it is windowed on the impractical ",(0,l.mdx)("inlineCode",{parentName:"p"},"[0, 0)")," range. For more details, see ",(0,l.mdx)("a",{parentName:"p",href:"#datasourceview"},"DataSourceView"),"."),(0,l.mdx)("h5",{id:"additionalviews"},"additionalViews"),(0,l.mdx)("p",null,"Holds additional ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," on this ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource"),". It contains key of ",(0,l.mdx)("inlineCode",{parentName:"p"},"viewId: string")," and value of ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView<T, KeyType>"),". The default view in ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," has ",(0,l.mdx)("inlineCode",{parentName:"p"},"DEFAULT_VIEW_ID = '0'"),", so all additionalViews cannot use this as the ",(0,l.mdx)("inlineCode",{parentName:"p"},"viewId"),". This is a ",(0,l.mdx)("inlineCode",{parentName:"p"},"readonly")," array and additional views are appended to the array by calling ",(0,l.mdx)("inlineCode",{parentName:"p"},"getAdditionalView(viewId: string)")," with a new ",(0,l.mdx)("inlineCode",{parentName:"p"},"viewId")),(0,l.mdx)("h5",{id:"size"},"size"),(0,l.mdx)("p",null,"The total number of records stored in this data source."),(0,l.mdx)("h5",{id:"records"},"records"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"records(): T[]"),". Returns all values stored in this data source in a defensive copy. Note that this operation performs ",(0,l.mdx)("inlineCode",{parentName:"p"},"O(n)"),", so typically one should operate on a subset of the records using ",(0,l.mdx)("inlineCode",{parentName:"p"},"size")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"get"),"."),(0,l.mdx)("h5",{id:"get"},"get"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"get(index: number): T"),". Returns the record at the given index, which is insertion order based. This operation does not take into consideration the current view. See also ",(0,l.mdx)("inlineCode",{parentName:"p"},"view.get")," to get a record based on ",(0,l.mdx)("em",{parentName:"p"},"visible")," position. To look items up based on their id, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"getById"),"."),(0,l.mdx)("h5",{id:"getbyid"},"getById"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"getById(key: string): T | undefined")," (for example, ",(0,l.mdx)("inlineCode",{parentName:"p"},'users.getById("jane")'),". Returns the record associated with the given key, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"undefined"),". This method can only be used if the ",(0,l.mdx)("inlineCode",{parentName:"p"},"key")," option was passed to ",(0,l.mdx)("inlineCode",{parentName:"p"},"createDataSource"),"."),(0,l.mdx)("h5",{id:"keys"},"keys"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"keys()"),", returns an iterator that will iterate all keys in the data source. For example, to create an array of all keys: ",(0,l.mdx)("inlineCode",{parentName:"p"},"const usernames = Array.from(users.keys())"),". This method can only be used if the ",(0,l.mdx)("inlineCode",{parentName:"p"},"key")," option was passed to ",(0,l.mdx)("inlineCode",{parentName:"p"},"createDataSource"),"."),(0,l.mdx)("h5",{id:"entries"},"entries"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"entries()"),". Similar to ",(0,l.mdx)("inlineCode",{parentName:"p"},"keys()"),", but will return an iterator that generate entry tuples, in the shape of ",(0,l.mdx)("inlineCode",{parentName:"p"},"[key, value]"),"."),(0,l.mdx)("h5",{id:"symboliterator"},"[Symbol.iterator]"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," supports the iterator protocol, so to visit all stored records one can use ",(0,l.mdx)("inlineCode",{parentName:"p"},"for (const user of users) {....}"),"."),(0,l.mdx)("h5",{id:"getindexofkey"},"getIndexOfKey"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"getById(key: string): number"),". Returns the insertion index of the record associated with the given key, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"-1"),". This method can only be used if the ",(0,l.mdx)("inlineCode",{parentName:"p"},"key")," option was passed to ",(0,l.mdx)("inlineCode",{parentName:"p"},"createDataSource"),"."),(0,l.mdx)("h5",{id:"append"},"append"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"append(record: T)"),". Appends a new record to the data collection. This method will throw if a duplicate key is inserted. Use ",(0,l.mdx)("inlineCode",{parentName:"p"},"upsert")," to automatically append ",(0,l.mdx)("em",{parentName:"p"},"or")," update. Mutations like ",(0,l.mdx)("inlineCode",{parentName:"p"},"append")," will be reflected in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"view")," automatically."),(0,l.mdx)("h5",{id:"update"},"update"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"update(index: number, record: T)"),". Replaces the given record in the data sources."),(0,l.mdx)("h5",{id:"delete"},"delete"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"delete(index: number)"),". Remove the record at the given index from the datasource. Note that if a the ",(0,l.mdx)("inlineCode",{parentName:"p"},"key")," option of the datasource is set, this operation degrades to ",(0,l.mdx)("inlineCode",{parentName:"p"},"O(n)")," performance and should typically be avoided."),(0,l.mdx)("h5",{id:"deletebyid"},"deleteById"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"delete(key: string): boolean"),". Removes the record with the given key. Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if the record existed and has been removed. This operation is ",(0,l.mdx)("inlineCode",{parentName:"p"},"O(n)")," expensive and should generally be avoided."),(0,l.mdx)("h5",{id:"shift"},"shift"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"shift(amount: number)"),". Removes the first ",(0,l.mdx)("inlineCode",{parentName:"p"},"amount")," records from the datasource. This is generally a performant operation."),(0,l.mdx)("h5",{id:"clear"},"clear"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"clear()"),". Removes all records from this data source."),(0,l.mdx)("h5",{id:"getadditionalview"},"getAdditionalView"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"getAdditionalView(viewId: string)"),". Gets an additional ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," by passing in an identifier ",(0,l.mdx)("inlineCode",{parentName:"p"},"viewId"),". If there already exists a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," with the ",(0,l.mdx)("inlineCode",{parentName:"p"},"viewId"),", we simply return that view instead."),(0,l.mdx)("h4",{id:"getallrecordsbyindex"},"getAllRecordsByIndex"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"getAllRecordsByIndex({ indexedAttribute: value, indexAttribute2: value2, .... })")),(0,l.mdx)("p",null,"This method allows fast lookups for objects that match specific attributes exactly.\nReturns all items matching the specified index query.\nNote that the results are unordered, unless\nrecords have not been updated using upsert / update, in that case\ninsertion order is maintained.\nIf no index has been specified for this exact keyset in the indexQuery (see options.indices), this method will throw."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"const ds = createDataSource([eatCookie, drinkCoffee, submitBug], {\n  key: 'id',\n  indices: [\n    ['title']\n    ['id', 'title'],\n    ['title', 'done'],\n  ],\n});\n\n// Find first element with title === cookie (or undefined)\nconst todo = ds.getFirstRecordByIndex({\n    title: 'cookie',\n})\n\n// Find all elements where title === cookie, and done === false\nconst todos = ds.getAllRecordsByIndex({\n  title: 'cookie',\n  done: false,\n})\n")),(0,l.mdx)("h4",{id:"datasourceview"},"DataSourceView"),(0,l.mdx)("p",null,"A materialized view on a DataSource, which can apply windowing, sorting and filtering and will be kept incrementally up to date with the underlying datasource.\nNote that the default window is empty, so after obtaining a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," one should typically call ",(0,l.mdx)("inlineCode",{parentName:"p"},"setWindow"),". For an introduction, see ","[createDataSource]","."),(0,l.mdx)("p",null,"The DataSourceView API is important if are creating your own visualization of a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource"),".\nHowever, if a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataSource")," is visualized using a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable"),", there is typically no need to directly interact with this API."),(0,l.mdx)("h5",{id:"datasource-1"},"datasource"),(0,l.mdx)("p",null,"A reference to the underlying ",(0,l.mdx)("a",{parentName:"p",href:"#datasource"},"DataSource"),"."),(0,l.mdx)("h5",{id:"windowstart"},"windowStart"),(0,l.mdx)("p",null,"See ",(0,l.mdx)("a",{parentName:"p",href:"#setwindow"},"setWindow"),"."),(0,l.mdx)("h5",{id:"windowend"},"windowEnd"),(0,l.mdx)("p",null,"See ",(0,l.mdx)("a",{parentName:"p",href:"#setwindow"},"setWindow"),"."),(0,l.mdx)("h5",{id:"size-1"},"size"),(0,l.mdx)("p",null,"The total size of the current view after applying filtering. Note that ",(0,l.mdx)("inlineCode",{parentName:"p"},"size")," does ",(0,l.mdx)("em",{parentName:"p"},"not")," reflect windowing. To get the window size use: ",(0,l.mdx)("inlineCode",{parentName:"p"},"windowEnd - windowStart"),". To get the total amount of records, without respecting the current filter, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"datasource.size"),"."),(0,l.mdx)("h5",{id:"issorted"},"isSorted"),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if a sort criterium is set."),(0,l.mdx)("h5",{id:"isfiltered"},"isFiltered"),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if a filter criterium is set."),(0,l.mdx)("h5",{id:"isrevered"},"isRevered"),(0,l.mdx)("p",null,"Return ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if the current view will be shown in reverse order."),(0,l.mdx)("h5",{id:"output"},"output"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"output(): T[]")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"output(start, end): T[]"),". Returns a defensive copy of all items visible in the provided range window. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"start")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"end")," are omitted, the current window will be used. To get all items visible in the current view, ignoring the window, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"view.output(0, view.size)"),"."),(0,l.mdx)("h5",{id:"symboliterator-1"},"[Symbol.iterator]"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"DataSourceView")," supports the iterator protocol, so the currently visible output can be iterated using for example ",(0,l.mdx)("inlineCode",{parentName:"p"},"for (const user in users.view) { ... }"),". The iterator will always apply the current window."),(0,l.mdx)("h5",{id:"setwindow"},"setWindow"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"setWindow(start, end)"),". This method sets the current visible window to the specified range (which will include ",(0,l.mdx)("inlineCode",{parentName:"p"},"start"),", but not ",(0,l.mdx)("inlineCode",{parentName:"p"},"end"),", so ",(0,l.mdx)("inlineCode",{parentName:"p"},"[start, end)"),")."),(0,l.mdx)("p",null,"Setting a window impacts the default behavior of ",(0,l.mdx)("inlineCode",{parentName:"p"},"output")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"iterator")," and, more importantly, the behavior of any listener: ",(0,l.mdx)("inlineCode",{parentName:"p"},"update")," events that happen outside the window will not be propagated to any listeners, and ",(0,l.mdx)("inlineCode",{parentName:"p"},"shift")," events will describe whether the happened ",(0,l.mdx)("inlineCode",{parentName:"p"},"in"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"before"),", or ",(0,l.mdx)("inlineCode",{parentName:"p"},"after")," the current window."),(0,l.mdx)("p",null,"Windowing will always be applied only after applying any filters, sorting and reversing."),(0,l.mdx)("h5",{id:"setfilter"},"setFilter"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"setFilter(filter: (record: T) => boolean)"),". Applies a filter to the current records. This will typically reduce ",(0,l.mdx)("inlineCode",{parentName:"p"},"size")," of this view. Example: ",(0,l.mdx)("inlineCode",{parentName:"p"},"users.view.setFilter(user => user.age >= 18)"),"."),(0,l.mdx)("h5",{id:"setsortby"},"setSortBy"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"setSortBy(field: string)")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"setSortBy(sortBy: (irecord: T) => primitive)"),". For example: ",(0,l.mdx)("inlineCode",{parentName:"p"},'users.view.setSortBy("age")')," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"users.viewSetSortBy(user => "),"${user.lastName} ${user.firstName}",(0,l.mdx)("inlineCode",{parentName:"p"},")"),". ",(0,l.mdx)("inlineCode",{parentName:"p"},"setSortBy")," will cause the data source to be sorted by the given field or criterium function. Sort is implemented efficiently by using a binary search to insert / remove newly arriving records, rather than performing a full sort. But this means that the sort function should be stable and pure."),(0,l.mdx)("p",null,"Sorting will always happen in ascending order, and if duplicate sort values appear, the insertion order will take precedence. To sort in descending order, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"setReversed"),". If a view doesn't have sorting specified, it will always show records in insertion order."),(0,l.mdx)("h5",{id:"togglerevered"},"toggleRevered"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"toggleReversed()"),". Toggles the output order between ascending and descending."),(0,l.mdx)("h5",{id:"setreversed"},"setReversed"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"setReversed(ascending: boolean)"),". Defines whether the output colletion is shown normal (ascending) or reverse (descending) order."),(0,l.mdx)("h5",{id:"reset"},"reset"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"reset()"),". Resets the window, filtering, sorting and reverse to their defaults. Note that this puts the window back to ",(0,l.mdx)("inlineCode",{parentName:"p"},"[0, 0)")," as well, meaning now records will be part of the output."),(0,l.mdx)("h5",{id:"get-1"},"get"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"get(index: number)"),". Returns the record at the given position in the output. The ",(0,l.mdx)("inlineCode",{parentName:"p"},"index")," parameter respects sorting, filtering and reversing, but does ",(0,l.mdx)("em",{parentName:"p"},"not")," respect any window offset. So ",(0,l.mdx)("inlineCode",{parentName:"p"},"get(0)")," will return the first record in the datasource according to the given filtering, sorting and reversing, while ",(0,l.mdx)("inlineCode",{parentName:"p"},"get(windowStart)")," will return the first of the records visible in the current window."),(0,l.mdx)("h5",{id:"setlistener"},"setListener"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"setListener(callback: undefined | (event: OutputChange) => void)"),". Sets up a listener that will get notified whenever the ",(0,l.mdx)("inlineCode",{parentName:"p"},"output")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"size")," of this view changes. This can be used to, for example, update the UI and is used by ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable")," under the hood.\nThe following events can be emitted. These events respect the current sorting, filtering and reversing. The shift ",(0,l.mdx)("inlineCode",{parentName:"p"},"location")," is expressed relatively to the current window. Now ",(0,l.mdx)("inlineCode",{parentName:"p"},"update")," events that are outside the current window will be emitted. ",(0,l.mdx)("inlineCode",{parentName:"p"},"reset")," events are typically emitted if a change happened that cannot be expressed in a limited number of shifts / updates. Such as changing sorting or filtering, calling ",(0,l.mdx)("inlineCode",{parentName:"p"},"clear()")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"reset()"),", or doing a large ",(0,l.mdx)("inlineCode",{parentName:"p"},"shift"),"."),(0,l.mdx)("p",null,"Currently only one listener is allowed at a time. Please contact the Flipper oncall if that doesn't suffice."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"type OutputChange =\n  | {\n      type: 'shift';\n      index: number; // the position at which records were inserted or removed\n      location: 'before' | 'in' | 'after'; // relative to current window\n      delta: number; // how many records were inserted (positive number) or removed (negative number)\n      newCount: number; // the new .size of the DataSourceView\n    }\n  | {\n      // an item, inside the current window, was changed\n      type: 'update';\n      index: number;\n    }\n  | {\n      // something big and awesome happened. Drop earlier updates to the floor and start again\n      // like: clear, filter or sorting change, etc\n      type: 'reset';\n      newCount: number;\n    };\n")),(0,l.mdx)("h2",{id:"react-hooks"},"React Hooks"),(0,l.mdx)("h3",{id:"methods-3"},"Methods"),(0,l.mdx)("h4",{id:"useplugin"},"usePlugin"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"const instance = usePlugin(plugin)")),(0,l.mdx)("p",null,"Can be used by any component in the plugin, and gives the current ",(0,l.mdx)("inlineCode",{parentName:"p"},"instance")," that corresponds with the currently loaded plugin.\nThe ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," parameter isn't actually used; it verifies that a component is used correctly inside a mounted component and helps with type inference.\nThe returned ",(0,l.mdx)("inlineCode",{parentName:"p"},"instance")," method corresponds to the object that is returned from the ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," / ",(0,l.mdx)("inlineCode",{parentName:"p"},"devicePlugin")," definition."),(0,l.mdx)("p",null,"See the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-custom#building-a-user-interface-for-the-plugin"},"Tutorial")," for how this hook is used in practice."),(0,l.mdx)("h4",{id:"usevalue"},"useValue"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"const currentValue = useValue(stateAtom)")),(0,l.mdx)("p",null,"Returns the current value of a state atom, and also subscribes the current component to future changes of the atom (in contrast to using ",(0,l.mdx)("inlineCode",{parentName:"p"},"stateAtom.get()")," directly)."),(0,l.mdx)("p",null,"See the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-custom#building-a-user-interface-for-the-plugin"},"Tutorial")," for how this hook is used in practice."),(0,l.mdx)("h4",{id:"uselogger"},"useLogger"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"const logger = useLogger()")),(0,l.mdx)("p",null,"Provides the default logger that can be used for console logging, error reporting and performance measurements.\nIn internal Meta builds, this is wired up to the internal statistic reporting. Use ",(0,l.mdx)("inlineCode",{parentName:"p"},"logger")," rather than using ",(0,l.mdx)("inlineCode",{parentName:"p"},"console")," directly."),(0,l.mdx)("p",null,"The logger API is defined as:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"interface Logger {\n  track(type: TrackType, event: string, data?: any, plugin?: string): void;\n  trackTimeSince(\n    mark: string,\n    eventName?: string | null | undefined,\n    data?: any,\n  ): void;\n  info(data: any, category: string): void;\n  warn(data: any, category: string): void;\n  error(data: any, category: string): void;\n  debug(data: any, category: string): void;\n}\n")),(0,l.mdx)("h4",{id:"usetrackedcallback"},"useTrackedCallback"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},'const eventHandler = useTrackedCallback("Interaction description", handlerFunction, deps)')),(0,l.mdx)("p",null,"Utility that wraps React's ",(0,l.mdx)("inlineCode",{parentName:"p"},"useCallback")," with tracking capabilities.\nThe API is similar, except that the first argument describes the interaction handled by the given event handler.\nFor more information, see ",(0,l.mdx)("a",{parentName:"p",href:"#tracked"},"Tracked")," in the UI Components page."),(0,l.mdx)("h4",{id:"usememoize"},"useMemoize"),(0,l.mdx)("p",null,"Slight variation on useMemo that encourages to create hoistable memoization functions,\nwhich encourages reuse and testability by no longer closing over variables that are used by the memoized function, but rather receiving them as arguments so that these functions beome pure."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"function MyComponent() {\n  const {findMetroDevice} = props;\n  const connections = useSomeHook();\n\n  const metroDevice = useMemoize(\n    findMetroDevice,\n    [connections.devices],\n  );\n\n  // etc\n}\n\nexport function findMetroDevice(findMetroDevice, deviceList) {\n  return deviceList.find(findMetroDevice);\n}\n\n")),(0,l.mdx)("h4",{id:"uselocalstoragestate"},"useLocalStorageState"),(0,l.mdx)("p",null,"Like ",(0,l.mdx)("inlineCode",{parentName:"p"},"useState"),", but the value will be stored in local storage under the given key and read back upon initialization.\nThe hook signature is similar to ",(0,l.mdx)("inlineCode",{parentName:"p"},"useState"),", except that the first argument is the storage key.\nThe storage key will be scoped automatically to the current plugin and any additional tracking scopes. (See ",(0,l.mdx)("a",{parentName:"p",href:"#trackingscope"},"TrackingScope")," in the 'UI Components' page)."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"const [showWhitespace, setShowWhitespace] = useLocalStorageState(\n  `showWhitespace`,\n  true\n);\n")),(0,l.mdx)("h2",{id:"ui-components"},"UI components"),(0,l.mdx)("h3",{id:"layout"},"Layout.*"),(0,l.mdx)("p",null,"Layout elements can be used to organize the screen layout.\nSee the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"Style Guide")," for more details."),(0,l.mdx)("h3",{id:"highlightcontext"},"HighlightContext"),(0,l.mdx)("h3",{id:"highlightprovider"},"HighlightProvider"),(0,l.mdx)("p",null,"React context provider for Highlight context. All wrapped componets can access context or use the useHighligher helper. Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"<HighlightProvider\n  text={searchTerm}\n  highlightColor={theme.searchHighlightBackground.yellow}>\n  <HighlightedText text='Lorem itsum'/>\n</HighlightProvider>\n")),(0,l.mdx)("h3",{id:"usehighlighter"},"useHighlighter"),(0,l.mdx)("p",null,"Hook to be used inside a Highlight context to render text with highlighting applied. Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"function HighlightedText(props: {text: string}) {\n  const highlightManager: HighlightManager = useHighlighter();\n  return <span>{highlightManager.render(props.text)}</span>;\n}\n")),(0,l.mdx)("h3",{id:"powersearch"},"PowerSearch"),(0,l.mdx)("h3",{id:"datatable"},"DataTable"),(0,l.mdx)("h3",{id:"dataformatter"},"DataFormatter"),(0,l.mdx)("h3",{id:"datainspector"},"DataInspector"),(0,l.mdx)("h3",{id:"datadescription"},"DataDescription"),(0,l.mdx)("h3",{id:"markertimeline"},"MarkerTimeline"),(0,l.mdx)("h3",{id:"elementsinspector"},"ElementsInspector"),(0,l.mdx)("h3",{id:"elementattribute"},"ElementAttribute"),(0,l.mdx)("h3",{id:"elementdata"},"ElementData"),(0,l.mdx)("h3",{id:"elementextrainfo"},"ElementExtraInfo"),(0,l.mdx)("h3",{id:"elementid"},"ElementID"),(0,l.mdx)("h3",{id:"elementsearchresultset"},"ElementSearchResultSet"),(0,l.mdx)("h3",{id:"elementsinspectorelement"},"ElementsInspectorElement"),(0,l.mdx)("h3",{id:"elementsinspectorprops"},"ElementsInspectorProps"),(0,l.mdx)("h3",{id:"timelinedatadescription"},"TimelineDataDescription"),(0,l.mdx)("h3",{id:"datatablepowersearchoperators"},"dataTablePowerSearchOperators"),(0,l.mdx)("h3",{id:"masterdetaillegacy"},"MasterDetailLegacy"),(0,l.mdx)("h3",{id:"datatablelegacy"},"DataTableLegacy"),(0,l.mdx)("p",null,"Coming soon"),(0,l.mdx)("h3",{id:"masterdetail"},"MasterDetail"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"MasterDetail")," provides a default setup for a ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable")," in combination with a sidebar, and some super common features like keyboard shortcuts, paste integration, and clear / pause-resume buttons."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"MasterDetail")," component accepts all ",(0,l.mdx)("inlineCode",{parentName:"p"},"DataTable")," props, and beyond that the following props."),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"sidebarPosition")," prop controls here to display the details of the currently selected record:",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"'main'")," (default): show the details in the standard, centrally controlled right sidebar"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"'right'"),": show a resizable pane to the right"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"'bottom'"),": show a resizable pane to the bottom"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"'none'"),": don't show details at all"))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"sidebarComponent"),": Component that accepts a 'record' prop that is used to render details.If none is provided, a standard ",(0,l.mdx)("inlineCode",{parentName:"li"},"DataInspector")," component will be used to display the entire record."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"sidebarSize"),": Default size of the sidebar."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"selection"),": If provided, this atom will be used to store selection in."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"isPaused"),": If provided, this atom will be used to store pause/resume state in, and a pause/resume toggle will be shown"),(0,l.mdx)("li",{parentName:"ul"},"`enableClear: If set, a clear button will be shown. By default, this will clear the dataSource (if any)."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onClear"),": Callback to be called when clear action is used."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"enableMenuEntries"),": If provided, standard menu entries will be created for clear, goToBottom and createPaste.")),(0,l.mdx)("h3",{id:"panel"},"Panel"),(0,l.mdx)("p",null,"A collapsible UI region. The collapsed state of the pane will automatically be persisted so that the collapsed state is restored the next time user visits the plugin again. Note that the children of a Panel should have some size, either a fixed or a natural size. Elements that grow to their parent size will become invisible."),(0,l.mdx)("p",null,"For demos and property documentation see the 'Flipper style guide'."),(0,l.mdx)("h3",{id:"tabs"},"Tabs"),(0,l.mdx)("h3",{id:"tab"},"Tab"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"Tabs")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"Tab")," component re-expose the TabControl as provided by Antd, and support the same properties. For more details, see the official ",(0,l.mdx)("a",{parentName:"p",href:"https://ant.design/components/tabs/"},"Ant Design")," docs."),(0,l.mdx)("p",null,"The following additional property is supported:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"grow"),". If set, the tab control will use all available vertical space. By default ",(0,l.mdx)("inlineCode",{parentName:"li"},"false"),".")),(0,l.mdx)("h3",{id:"toolbar"},"Toolbar"),(0,l.mdx)("p",null,"A horizontal panel to organize buttons and alike. Basically a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Layout.Horizontal")," with a border, padding, gap and wrapping enabled."),(0,l.mdx)("h3",{id:"codeblock"},"CodeBlock"),(0,l.mdx)("p",null,"A preformatted paragraph that supports wrapping, preserves whitespace and uses monospace."),(0,l.mdx)("h3",{id:"datalist"},"DataList"),(0,l.mdx)("p",null,"The DataList can be used to display a set of items efficiently, and where a single item can be selected."),(0,l.mdx)("p",null,"Properties:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"items"),": Items to display. Per item at least a title and unique id should be provided."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"value"),": The current selection"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onSelect")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onRenderItem"),": A custom render function. By default, the component will render the ",(0,l.mdx)("inlineCode",{parentName:"li"},"title")," in bold and description (if any) below it."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"type"),": ",(0,l.mdx)("inlineCode",{parentName:"li"},"default")," or `dropdown. Defines the styling of the component. By default shows a list, but alternatively the items can be displayed in a drop down"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"scrollable"),": By default the data list will take all available space and scroll if items aren't otherwise visible. By setting ",(0,l.mdx)("inlineCode",{parentName:"li"},"scrollable={false}")," the list will only take its natural size")),(0,l.mdx)("h3",{id:"dialog"},"Dialog"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"Dialog")," namespace provides a set of utility to prompt the user with feedback of input. Rather than spawning dialogs by hand, the benefit of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Dialog")," utilities is that they all return promises capture the results."),(0,l.mdx)("p",null,"The promises returned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"Dialog")," will resolve to ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," if the user intentionally closed the dialog (typically by using cancel / escape / clicking the close button)."),(0,l.mdx)("p",null,"The promises returned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"Dialog")," utilities will expose a ",(0,l.mdx)("inlineCode",{parentName:"p"},"close()")," method that can be used to programmatically close a dialog. In which case the pending promise will resolve to ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," as well."),(0,l.mdx)("p",null,"General properties accepted by the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Dialog")," utility:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"title")," - Overrides the title of the dialog, defaults to empty."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"width")," - Overrides the default width (400) for dialogs. Number in pixels."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"okText")," - Overrides the caption of the OK button"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"cancelText")," - Overrides the caption of the Cancel button")),(0,l.mdx)("p",null,"Available utilities"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.confirm(options): Promise<boolean>"),". Show a confirmation dialog twithino the user. Options:",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"message"),": Description of what the user is confirming."))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.prompt(options): Promise<string | false>"),". Inspired by ",(0,l.mdx)("inlineCode",{parentName:"li"},"window.prompt"),". Prompt the user for some input. Options:",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"message"),": Text accompanying the input"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"defaultValue")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onConfirm(value) => Promise<string>"),". Can be used to transform the inputted value before resolving the prompt promise. If the handler throws, this will be shown as validation error in the dialog."))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.loading(options): Promise<void>"),". Shows a dialog with a loading spinner. This dialog cannot be closed by the user, so instead ",(0,l.mdx)("inlineCode",{parentName:"li"},".close()")," should be called programmatically on the returned promise.",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"message"),": Message to display with the loading spinner."))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.show<T>(options): Promise<T | false"),". Low level building block to build dialogs. Options:",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"children"),": React Element to render as children of the dialog."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onConfirm: () => Promise<T>"),". Handler to handle the OK button, which should produce the value the ",(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.show")," call will resolve to."))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"Dialog.alert(options)")," show a small dialog, inspired by window.alert. Returns a ",(0,l.mdx)("inlineCode",{parentName:"li"},"Promise<void>"),". Options:",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"type"),", determines style. One of: ",(0,l.mdx)("inlineCode",{parentName:"li"},"'info' | 'error' | 'warning' | 'success'"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"message")," parameter to specify the content of the dialog.")))),(0,l.mdx)("h3",{id:"spinner"},"Spinner"),(0,l.mdx)("p",null,"Shows a loading spinner. Accept an optional ",(0,l.mdx)("inlineCode",{parentName:"p"},"size")," to make the spinner larger / smaller."),(0,l.mdx)("h3",{id:"nux"},"NUX"),(0,l.mdx)("p",null,"An element that can be used to provide a New User eXperience: Hints that give a one-time introduction to new features to the current user."),(0,l.mdx)("p",null,"For more details, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"Style Guide"),"."),(0,l.mdx)("h3",{id:"fileselector"},"FileSelector"),(0,l.mdx)("p",null,"Enables file uploading. Shows an input with an upload button. User can select and upload files by clicking on the button, on the input, by pressing enter when the input is focused, and by dropping a file on the input. The input's value is a path to a file or its name if path is not available (in browsers)."),(0,l.mdx)("p",null,"Exports ",(0,l.mdx)("inlineCode",{parentName:"p"},"FileSelector")," components with the following props:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"label")," -  placeholder text displayed in the input when it is empty."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"onChange")," - callback called when new files are selected or when the existing selection is reset."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"multi")," - ","[optional]"," allows selecting multiple files at once."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"extensions")," - ","[optional]"," list of allowed file extensions."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"required")," - ","[optional]"," boolean to mark the file selection input as required."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"encoding")," - ","[optional]"," imported file encoding. Default: UTF-8."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"className")," - ","[optional]"," class name string."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"style")," - ","[optional]"," CSS styles object.")),(0,l.mdx)("h3",{id:"detailsidebar"},"DetailSidebar"),(0,l.mdx)("p",null,"An element that can be passed children which will be shown in the right sidebar of Flipper.\nHorizontal scrolling will be enabled by default.\nTo fine-tune the default dimensions use ",(0,l.mdx)("inlineCode",{parentName:"p"},"width")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"minWidth"),".\nIt doesn't really matter where exactly this component is used in your layout, as the contents will be moved to the main Flipper chrome, rather than being rendered in place."),(0,l.mdx)(d.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("h3",{id:"tracked"},"Tracked"),(0,l.mdx)("p",null,"An element that can be used to track user interactions.\nAn example Scuba query can be found within ",(0,l.mdx)("a",{parentName:"p",href:"https://fburl.com/scuba/infinity_analytics_events/xryoq5j7"},"Infinity Analytics"),"."),(0,l.mdx)("p",null,"For more details, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"Style Guide"),"."),(0,l.mdx)("h3",{id:"trackingscope"},"TrackingScope"),(0,l.mdx)("p",null,"Defines the location of underlying Tracked elements more precisely."),(0,l.mdx)("p",null,"For more details, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"Style Guide"),"."),(0,l.mdx)("h3",{id:"withtrackingscope"},"withTrackingScope"),(0,l.mdx)("p",null,"Higher order component that wraps a component automatically in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"TrackingScope")," (see above) using the component name as ",(0,l.mdx)("inlineCode",{parentName:"p"},"scope"),".")),(0,l.mdx)("h3",{id:"theme-object"},"theme object"),(0,l.mdx)("p",null,"Provides a standard set of colors and spacings, used by the Flipper ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"Style Guide"),".\nThe colors exposed here support dark mode."),(0,l.mdx)("h2",{id:"utilities"},"Utilities"),(0,l.mdx)("h3",{id:"suggestnewplugin"},"suggestNewPlugin"),(0,l.mdx)("p",null,"Display a pop-up prompting users switch to a new plugin"),(0,l.mdx)("h3",{id:"getflipperlib"},"getFlipperLib"),(0,l.mdx)("p",null,"A set of globally available utilities such as opening links, interacting with the clipboard (see the following example), and many more."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-sh"},'getFlipperLib().writeTextToClipboard("hello from Flipper");\n')),(0,l.mdx)("p",null,"The full set of utilities is listed in ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/flipper-plugin-core/src/plugin/FlipperLib.tsx#L95"},"FlipperLib.tsx"),"."),(0,l.mdx)("p",null,"Since the Node.js system API's cannot be used directly by Flipper plugins (when running in a browser), the utilties exposed on ",(0,l.mdx)("inlineCode",{parentName:"p"},"getFlipperLib().remoteServerContext")," should be used instead, as detailed in ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/node-apis"},"Using Node.js APIs"),"."),(0,l.mdx)("h3",{id:"createtableplugin"},"createTablePlugin"),(0,l.mdx)("p",null,"A utility to create a plugin that consists of a main table and details JSON view with minimal effort. For an example, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-table"},"Building a Desktop Plugin - Showing a Table")," tutorial."),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"createTablePlugin")," creates a plugin that handles receiving data from the client and\ndisplaying it in a table. The table handles selection of items, sorting, filtering and rendering a sidebar where more detailed information can be presented about the selected row."),(0,l.mdx)("p",null,"The plugin expects to be able to subscribe to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"method")," argument and receive single data objects. Each data object represents a row in the table."),(0,l.mdx)("p",null,"An optional ",(0,l.mdx)("inlineCode",{parentName:"p"},"resetMethod")," argument can be provided that replaces the current rows with the data provided. This is useful when connecting to Flipper for this first time, or reconnecting to the client in an unknown state."),(0,l.mdx)("p",null,"Since the ",(0,l.mdx)("inlineCode",{parentName:"p"},"createTablePlugin")," defines both the ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"Component")," for the plugin in one go, making the result is most easily done by using ",(0,l.mdx)("inlineCode",{parentName:"p"},"module.exports = createTablePlugin(....)")," so that both are exported from the plugin package."),(0,l.mdx)("p",null,"Valid options are:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"method: string")," - the event that is sent from the corresponding client plugin and should be collected."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"resetMethod?: string")," - an event name, that, when sent from the client, should clear the current table."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"columns: DataTableColumn")," - a description of the columns to display (see ",(0,l.mdx)("a",{parentName:"li",href:"#datatable"},"DataTable")," in the 'UI Components' page."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"key?: string")," - if set, the specified field of the incoming data will be treated as unique identifier. Receiving new data for existing rows will replace the existing rows. Without this property the table will only be appended."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onCopyRows?: (rows) => string")," - a function that can be used to customize how records are copied to the clipboard. By default, they are ",(0,l.mdx)("inlineCode",{parentName:"li"},"JSON.stringify"),"-ed."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"buildRow?: (rawData) => row")," - a function that can be used to preprocess the incoming data before it is handed off to the table."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"renderSidebar?: (row) => React.Element")," - a function that can be used to customize how the sidebar is rendered.")),(0,l.mdx)("h3",{id:"batched"},"batched"),(0,l.mdx)("h3",{id:"batch"},"batch"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"batch(() => { /* state updates */ })")),(0,l.mdx)("p",null,"Low-level utility to batch state updates to reduce the number of potential re-renders by React."),(0,l.mdx)("p",null,"Wraps React's ",(0,l.mdx)("inlineCode",{parentName:"p"},"unstable_batchedUpdates"),".\nEvent handlers provided by React or ",(0,l.mdx)("inlineCode",{parentName:"p"},"flipper-plugin")," already apply ",(0,l.mdx)("inlineCode",{parentName:"p"},"batch")," automatically, so using this utility is only recommended when updating plugin state in an asynchronous process."),(0,l.mdx)("h3",{id:"produce"},"produce"),(0,l.mdx)("p",null,"A convenience re-export of ",(0,l.mdx)("inlineCode",{parentName:"p"},"produce")," from ",(0,l.mdx)("a",{parentName:"p",href:"https://immerjs.github.io/immer/docs/produce"},"Immer"),"."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"update")," method of the state atoms returned by ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState")," automatically applies ",(0,l.mdx)("inlineCode",{parentName:"p"},"produce")," to its updater function."),(0,l.mdx)("h3",{id:"renderreactroot"},"renderReactRoot"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"renderReactRoot(handler: (unmount: () => void) => React.ReactElement)")),(0,l.mdx)("p",null,"Renders an element outside the current DOM tree."),(0,l.mdx)("p",null,"This is a low-level utility that can be used to render for example Modal dialogs.\nThe provided ",(0,l.mdx)("inlineCode",{parentName:"p"},"handler")," function should return the root element to be rendered.\nOnce the element can be removed from the DOM, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"unmount")," callback should be called."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-typescript"},"renderReactRoot((unmount) => (\n  <RequiredParametersDialog\n    onHide={unmount}\n    uri={filteredQuery}\n    requiredParameters={params}\n    onSubmit={navigateTo}\n  />\n));\n")),(0,l.mdx)("h3",{id:"sleep"},"sleep"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"await sleep(1000)")),(0,l.mdx)("p",null,"Creates a promise that automatically resolves after the specified number of milliseconds."),(0,l.mdx)("h3",{id:"timeout"},"timeout"),(0,l.mdx)("p",null,"Usage ",(0,l.mdx)("inlineCode",{parentName:"p"},"await timeout(1000, promise, message?)")),(0,l.mdx)("h3",{id:"styled"},"styled"),(0,l.mdx)("p",null,"A convenience re-export of ",(0,l.mdx)("inlineCode",{parentName:"p"},"styled")," from ",(0,l.mdx)("a",{parentName:"p",href:"https://emotion.sh/docs/styled"},"emotion"),"."),(0,l.mdx)("h3",{id:"textcontent"},"textContent"),(0,l.mdx)("p",null,"Given a string or React element, returns a text representation of that element, that is suitable as plain text."),(0,l.mdx)("h3",{id:"path"},"path"),(0,l.mdx)("p",null,"A set of utilizities to handle file paths. A subset of Node.js' ",(0,l.mdx)("a",{parentName:"p",href:"https://nodejs.org/api/path.html"},"path"),"."),(0,l.mdx)("h4",{id:"pathbasenamepath-ext"},(0,l.mdx)("inlineCode",{parentName:"h4"},"path.basename(path[, ext])")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"path")," {string}"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"ext")," {string} An optional file extension"),(0,l.mdx)("li",{parentName:"ul"},"Returns: {string}")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"path.basename()")," method returns the last portion of a ",(0,l.mdx)("inlineCode",{parentName:"p"},"path"),", similar to\nthe Unix ",(0,l.mdx)("inlineCode",{parentName:"p"},"basename")," command. Trailing directory separators are ignored."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"path.basename('/foo/bar/baz/asdf/quux.html');\n// Returns: 'quux.html'\n\npath.basename('/foo/bar/baz/asdf/quux.html', '.html');\n// Returns: 'quux'\n")),(0,l.mdx)("h4",{id:"pathextnamepath"},(0,l.mdx)("inlineCode",{parentName:"h4"},"path.extname(path)")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"path")," {string}"),(0,l.mdx)("li",{parentName:"ul"},"Returns: {string}")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"path.extname()")," method returns the extension of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"path"),", from the last\noccurrence of the ",(0,l.mdx)("inlineCode",{parentName:"p"},".")," (period) character to end of string in the last portion of\nthe ",(0,l.mdx)("inlineCode",{parentName:"p"},"path"),". If there is no ",(0,l.mdx)("inlineCode",{parentName:"p"},".")," in the last portion of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"path"),", or if\nthere are no ",(0,l.mdx)("inlineCode",{parentName:"p"},".")," characters other than the first character of\nthe basename of ",(0,l.mdx)("inlineCode",{parentName:"p"},"path")," (see ",(0,l.mdx)("inlineCode",{parentName:"p"},"path.basename()"),") , an empty string is returned."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"path.extname('index.html');\n// Returns: '.html'\n\npath.extname('index.coffee.md');\n// Returns: '.md'\n\npath.extname('index.');\n// Returns: '.'\n\npath.extname('index');\n// Returns: ''\n\npath.extname('.index');\n// Returns: ''\n\npath.extname('.index.md');\n// Returns: '.md'\n")),(0,l.mdx)("h4",{id:"pathjoinpaths"},(0,l.mdx)("inlineCode",{parentName:"h4"},"path.join([...paths])")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"...paths")," {string} A sequence of path segments"),(0,l.mdx)("li",{parentName:"ul"},"Returns: {string}")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"path.join()")," method joins all given ",(0,l.mdx)("inlineCode",{parentName:"p"},"path")," segments together using the\nplatform-specific separator as a delimiter, then normalizes the resulting path."),(0,l.mdx)("p",null,"Zero-length ",(0,l.mdx)("inlineCode",{parentName:"p"},"path")," segments are ignored. If the joined path string is a\nzero-length string then ",(0,l.mdx)("inlineCode",{parentName:"p"},"'.'")," will be returned, representing the current\nworking directory."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// Returns: '/foo/bar/baz/asdf'\n")),(0,l.mdx)("h4",{id:"pathnormalizepath"},(0,l.mdx)("inlineCode",{parentName:"h4"},"path.normalize(path)")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"path")," {string}"),(0,l.mdx)("li",{parentName:"ul"},"Returns: {string}")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"path.normalize()")," method normalizes the given ",(0,l.mdx)("inlineCode",{parentName:"p"},"path"),", resolving ",(0,l.mdx)("inlineCode",{parentName:"p"},"'..'")," and\n",(0,l.mdx)("inlineCode",{parentName:"p"},"'.'")," segments."),(0,l.mdx)("p",null,"When multiple, sequential path segment separation characters are found (e.g.\n",(0,l.mdx)("inlineCode",{parentName:"p"},"/"),"), they are replaced by a single\ninstance of ",(0,l.mdx)("inlineCode",{parentName:"p"},"/"),". Trailing separators are preserved."),(0,l.mdx)("p",null,"If the ",(0,l.mdx)("inlineCode",{parentName:"p"},"path")," is a zero-length string, ",(0,l.mdx)("inlineCode",{parentName:"p"},"'.'")," is returned, representing the\ncurrent working directory."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"path.normalize('/foo/bar//baz/asdf/quux/..');\n// Returns: '/foo/bar/baz/asdf'\n")),(0,l.mdx)("h3",{id:"uuid"},"uuid"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"uuid()")),(0,l.mdx)("p",null,"Returns UUID V4."),(0,l.mdx)("h3",{id:"safestringify"},"safeStringify"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"safeStringify(dataStructure)")),(0,l.mdx)("p",null,"Serialises the given data structure using ",(0,l.mdx)("inlineCode",{parentName:"p"},"JSON.stringify"),", but doesn't throw if the processes failed, but rather returns a ",(0,l.mdx)("inlineCode",{parentName:"p"},"<unserializable ...>")," string."),(0,l.mdx)("h3",{id:"createcontrolledpromise"},"createControlledPromise"),(0,l.mdx)("p",null,"Creates a promise and functions to resolve/reject it externally. Also provides its current state."),(0,l.mdx)("p",null,"Returns:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ts"},"// When the promise is pending\ntype Res<T> = {\n  promise: Promise<T>;\n  resolve: (...res: T extends void ? [] : [T]) => void;\n  reject: (reason: unknown) => void;\n  state: 'pending';\n  promiseVal: undefined;\n} | {\n  promise: Promise<T>;\n  resolve: (...res: T extends void ? [] : [T]) => void;\n  reject: (reason: unknown) => void;\n  state: 'resolved';\n  // Resolved value\n  promiseVal: T;\n} | {\n  promise: Promise<T>;\n  resolve: (...res: T extends void ? [] : [T]) => void;\n  reject: (reason: unknown) => void;\n  state: 'rejected';\n  // Rejection reason\n  promiseVal: unknown;\n}\n")),(0,l.mdx)("p",null,"Usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"const controllerPromise = createControlledPromise()\nsomeService.on('event', (val) => controllerPromise.resolve(val))\nawait controllerPromise.promise\n")),(0,l.mdx)("h3",{id:"isatom"},"isAtom"),(0,l.mdx)("p",null,"Usage: ",(0,l.mdx)("inlineCode",{parentName:"p"},"isAtom(value)")),(0,l.mdx)("p",null,"Checks if value is an ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/566f7108c9efd8aefc8522af645bd0674fb91b20/desktop/flipper-plugin/src/state/atom.tsx#L30"},"Atom"),". Returns boolean."),(0,l.mdx)("h3",{id:"reportpluginfailures"},"reportPluginFailures"),(0,l.mdx)("p",null,"Wraps a promise together with a description of the action that's performed and the name of the plugin\nto track success rates and duration of the actions. This is a no-op for the open-source version of Flipper\nas we do not collect any data from users."),(0,l.mdx)("p",null,"Example usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {reportPluginFailures} from 'flipper-plugin';    \nconst lastCreatedBisect: PreviousBisects = await reportPluginFailures(\n  graphQLQuery(\n    `query MyQuery {\n      viewer {\n        data (first: 1) {\n          nodes {\n            id\n            date_created\n          }\n        }\n      }\n    }`,\n    60 * 1000,\n  ),\n  'queryMyQuery',\n  'myplugin',\n);\n")),(0,l.mdx)(d.FbInternalOnly,{mdxType:"FbInternalOnly"},"Refer to ",(0,l.mdx)(r.default,{to:"/docs/fb/adding-analytics-0/",mdxType:"Link"},"the fb-only documentation")," for adding analytics to your plugins."),(0,l.mdx)("h3",{id:"trycatchreportpluginfailures"},"tryCatchReportPluginFailures"),(0,l.mdx)("p",null,"See above for ",(0,l.mdx)("a",{parentName:"p",href:"#reportpluginfailures"},"reportPluginFailures"),". This takes a callback and wraps it in a try/catch block instead of expecting a promise."),(0,l.mdx)("h3",{id:"trycatchreportpluginfailuresasync"},"tryCatchReportPluginFailuresAsync"),(0,l.mdx)("p",null,"Same as ",(0,l.mdx)("a",{parentName:"p",href:"#trycatchreportpluginfailures"},"tryCatchReportPluginFailures")," but for async functions."),(0,l.mdx)("h2",{id:"testutils"},"TestUtils"),(0,l.mdx)("p",null,"The object ",(0,l.mdx)("inlineCode",{parentName:"p"},"TestUtils")," as exposed from ",(0,l.mdx)("inlineCode",{parentName:"p"},"flipper-plugin")," exposes utilities to write unit tests for Sandy plugins.\nDifferent utilities are exposed depending on whether you want to test a client or device plugin, and whether or not the component should be rendered or only the logic itself is going to be tested.\nIt is recommended to follow the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-custom"},"Tutorial")," first, as it explains how unit tests should be setup."),(0,l.mdx)("h3",{id:"starting-a-plugin"},"Starting a plugin"),(0,l.mdx)("p",null,"Usage:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"const runner = TestUtils.startPlugin(pluginModule, options?)")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"const runner = TestUtils.renderPlugin(pluginModule, options?)")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"const runner = TestUtils.startDevicePlugin(devicePluginModule, options?)")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"const runner = TestUtils.renderDevicePlugin(devicePluginModule, options?)"))),(0,l.mdx)("p",null,"Starts a client plugin in a fully mocked environment, but without rendering support.\nThe pluginModule is an object that has a ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," (or ",(0,l.mdx)("inlineCode",{parentName:"p"},"devicePlugin")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"supportsDevice"),") and ",(0,l.mdx)("inlineCode",{parentName:"p"},"Component")," property.\nTypically, it is invoked with ",(0,l.mdx)("inlineCode",{parentName:"p"},"startPlugin(PluginUnderTest)"),", where ",(0,l.mdx)("inlineCode",{parentName:"p"},"PluginUnderTest")," is loaded like ",(0,l.mdx)("inlineCode",{parentName:"p"},'import * as PluginUnderTest from "../index.tsx"')," (the path to the actual definition).\nHowever, it doesn't have to be loaded with an entire module, and a local object with the same signature can be constructed as well."),(0,l.mdx)("h4",{id:"startplugin-options"},"startPlugin options"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"options")," argument is optional, but can specify the following fields:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"initialState"),": Can be used to start the plugin in a certain state, rather than in the default state. ",(0,l.mdx)("inlineCode",{parentName:"li"},"initialState")," should be an object that specifies for all the state atoms that have the ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," option set, their initial value. For example: ",(0,l.mdx)("inlineCode",{parentName:"li"},'{ initialState: { rows: ["hello", "world"]}}'),", where ",(0,l.mdx)("inlineCode",{parentName:"li"},"rows")," matches the ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," key of an atom."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"isArchived: boolean"),": Setting this flag, will set the ",(0,l.mdx)("inlineCode",{parentName:"li"},"isArchived")," on the mocked device as well. Set it if you want to test the behavior of your plugin for imported devices (see also ",(0,l.mdx)("a",{parentName:"li",href:"#isarchived"},"Device.isArchived"),"). Defaults to ",(0,l.mdx)("inlineCode",{parentName:"li"},"false"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"isBackgroundPlugin"),": This makes sure the test runner emits life-cycle events in a way that is typical for background plugins. Defaults to ",(0,l.mdx)("inlineCode",{parentName:"li"},"false"),". The notable difference in behavior is that calling ",(0,l.mdx)("inlineCode",{parentName:"li"},".active()")," on the test runner won't trigger the ",(0,l.mdx)("inlineCode",{parentName:"li"},"connect")," event to be fired, nor the ",(0,l.mdx)("inlineCode",{parentName:"li"},".deactivate()")," the ",(0,l.mdx)("inlineCode",{parentName:"li"},"disconnect")," event."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"startUnactivated"),": This does not activate the plugin; ",(0,l.mdx)("inlineCode",{parentName:"li"},"connect")," needs to be explicitly called. This can be used in case setting mock implementation for ",(0,l.mdx)("inlineCode",{parentName:"li"},"onSend")," is required to make sure Client plugin works as expected. Defaults to ",(0,l.mdx)("inlineCode",{parentName:"li"},"false"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"GKs"),": A string array of gatekeeper names for which ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.GK")," will ",(0,l.mdx)("inlineCode",{parentName:"li"},"true")," inside the test. By default GKs are assumed to be disabled inside unit tests.")),(0,l.mdx)("h4",{id:"the-test-runner-object"},"The test runner object"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"startPlugin")," returns an object that can be used to inspect and interact with your plugin instance.\nAgain, see the tutorial how to interact with this object in general.\nThe test runner is a bag full of utilities, but typically it is fine to just destructure the utilities relevant for the test.\nExposed members:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"instance"),": The object (public API) returned from your plugin definition. You will typically use this in most tests, either to trigger updates or to inspect the current state of the plugin."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"exportState()"),": Grabs the current state of all ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," enabled state atoms. The object format returned here is the same as in the ",(0,l.mdx)("inlineCode",{parentName:"li"},"initialState")," option."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"activate()"),": Emulate the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onActivate")," event. By default, ",(0,l.mdx)("inlineCode",{parentName:"li"},"startPlugin")," already starts the plugin in activated state and calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"activate")," to test the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onActivate")," event should be preceded by a ",(0,l.mdx)("inlineCode",{parentName:"li"},"deactivate()")," call first."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"deactivate()"),": Emulates a user navigating away from the plugin."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"destroy()"),": Emulates the plugin being cleaned up, for example because the plugin is disabled by the user, or because the device / client has disconnected. After calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"destroy")," the current ",(0,l.mdx)("inlineCode",{parentName:"li"},"runner")," is unusable."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"triggerDeepLink(payload)"),": Emulates a deepLink being triggered and fires the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onDeepLink")," event."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"triggerMenuEntry(label)"),": Emulates the user clicking a menu entry in the Flipper main menu."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"flipperLib"),": An object that exposed ",(0,l.mdx)("inlineCode",{parentName:"li"},"jest.fn()")," mocks for all built-in Flipper APIs that can be called by your plugin. So, assertions can be made that the plugin did actually invoke those methods. For example: ",(0,l.mdx)("inlineCode",{parentName:"li"},'expect(runner.flipperLib.createPaste).toBeCalledWith("test message")'),". Currently supported mocks: ",(0,l.mdx)("inlineCode",{parentName:"li"},"createPaste"),", ",(0,l.mdx)("inlineCode",{parentName:"li"},"enableMenuEntries"),".")),(0,l.mdx)("p",null,"The following members are available when using the ",(0,l.mdx)("inlineCode",{parentName:"p"},"render...")," variant rather than the ",(0,l.mdx)("inlineCode",{parentName:"p"},"start...")," variant:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"renderer"),": This object can be used to query the DOM and further interact with it. It is provided by react-testing-library, and further documented in the ",(0,l.mdx)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/api#render-result"},"render Result")," page."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"act"),": Use this function to wrap interactions with the plugin under test into a transaction, after which the DOM updates will be flushed by React. See also the React.js ",(0,l.mdx)("a",{parentName:"li",href:"https://reactjs.org/docs/test-utils.html#act"},"act()")," documentation.")),(0,l.mdx)("p",null,"The following members are only available for Client plugins:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvent(event, params)"),": Emulates an event being sent by the client plugin. Will trigger the corresponding ",(0,l.mdx)("inlineCode",{parentName:"li"},"onMessage")," handler in the plugin."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvents({ method: string, params: object}[])"),": Like ",(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvent"),", but sends multiple events at once."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"onSend"),": A ",(0,l.mdx)("inlineCode",{parentName:"li"},"jest.fn()")," that can be used to assert that ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.send()")," was called by the plugin under test. For example, ",(0,l.mdx)("inlineCode",{parentName:"li"},"expect(runner.onSend).toBeCalledWith('currentLogs', { since: 0})"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"connect()"),": Triggers the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onConnect()")," event. (For non-background plugins ",(0,l.mdx)("inlineCode",{parentName:"li"},"activate()")," could as well be used for this)."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"disconnect()"),": Triggers the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onDisconnect()")," event. (For non-background plugins ",(0,l.mdx)("inlineCode",{parentName:"li"},"deactivate()")," could as well be used for this).")),(0,l.mdx)("p",null,"The following members are only available for Device plugins:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"sendLogEntry(logEntry)"),": Emulates a log message arriving from the device. Triggers the ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.device.onLogEntry")," listener.")))}x.isMDXComponent=!0}}]);