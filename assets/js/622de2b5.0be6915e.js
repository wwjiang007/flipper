"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7582],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>s,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),u=function(e){return function(n){var t=c(n.components);return a.createElement(e,l({},n,{components:t}))}},c=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=c(t),s=i,g=u["".concat(r,".").concat(s)]||u[s]||m[s]||l;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<l;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});var a=t(67294),i=t(86010);const l="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.default)(l,r),hidden:t},n)}},74866:(e,n,t)=>{t.r(n),t.d(n,{default:()=>w});var a=t(83117),i=t(67294),l=t(86010),r=t(12466),o=t(76775),p=t(91980),d=t(67392),u=t(50012);function c(e){return function(e){var n,t;return null!=(n=null==(t=i.Children.map(e,(function(e){if(!e||(0,i.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function s(e){var n=e.values,t=e.children;return(0,i.useMemo)((function(){var e=null!=n?n:c(t);return function(e){var n=(0,d.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function g(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,l=(0,o.k6)(),r=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,p._X)(r),(0,i.useCallback)((function(e){if(r){var n=new URLSearchParams(l.location.search);n.set(r,e),l.replace(Object.assign({},l.location,{search:n.toString()}))}}),[r,l])]}function f(e){var n,t,a,l,r=e.defaultValue,o=e.queryString,p=void 0!==o&&o,d=e.groupId,c=s(e),f=(0,i.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var i=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:r,tabValues:c})})),v=f[0],b=f[1],h=g({queryString:p,groupId:d}),y=h[0],x=h[1],N=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),t=(0,u.Nk)(n),a=t[0],l=t[1],[a,(0,i.useCallback)((function(e){n&&l.set(e)}),[n,l])]),w=N[0],P=N[1],C=function(){var e=null!=y?y:w;return m({value:e,tabValues:c})?e:null}();return(0,i.useLayoutEffect)((function(){C&&b(C)}),[C]),{selectedValue:v,selectValue:(0,i.useCallback)((function(e){if(!m({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);b(e),x(e),P(e)}),[x,P,c]),tabValues:c}}var v=t(72389);const b="tabList__CuJ",h="tabItem_LNqP";function y(e){var n=e.className,t=e.block,o=e.selectedValue,p=e.selectValue,d=e.tabValues,u=[],c=(0,r.o5)().blockElementScrollPositionUntilNextRender,s=function(e){var n=e.currentTarget,t=u.indexOf(n),a=d[t].value;a!==o&&(c(n),p(a))},m=function(e){var n,t=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":var a,i=u.indexOf(e.currentTarget)+1;t=null!=(a=u[i])?a:u[0];break;case"ArrowLeft":var l,r=u.indexOf(e.currentTarget)-1;t=null!=(l=u[r])?l:u[u.length-1]}null==(n=t)||n.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.default)("tabs",{"tabs--block":t},n)},d.map((function(e){var n=e.value,t=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:function(e){return u.push(e)},onKeyDown:m,onClick:s},r,{className:(0,l.default)("tabs__item",h,null==r?void 0:r.className,{"tabs__item--active":o===n})}),null!=t?t:n)})))}function x(e){var n=e.lazy,t=e.children,a=e.selectedValue,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var r=l.find((function(e){return e.props.value===a}));return r?(0,i.cloneElement)(r,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},l.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function N(e){var n=f(e);return i.createElement("div",{className:(0,l.default)("tabs-container",b)},i.createElement(y,(0,a.Z)({},e,n)),i.createElement(x,(0,a.Z)({},e,n)))}function w(e){var n=(0,v.default)();return i.createElement(N,(0,a.Z)({key:String(n)},e))}},57916:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>v,frontMatter:()=>u,metadata:()=>s,toc:()=>g});var a=t(83117),i=t(80102),l=(t(67294),t(3905)),r=t(74866),o=t(85162),p=t(86341),d=["components"],u={id:"create-plugin",title:"Client Plugin API"},c=void 0,s={unversionedId:"extending/create-plugin",id:"extending/create-plugin",title:"Client Plugin API",description:"FlipperPlugin",source:"@site/../docs/extending/create-plugin.mdx",sourceDirName:"extending",slug:"/extending/create-plugin",permalink:"/docs/extending/create-plugin",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/create-plugin.mdx",tags:[],version:"current",frontMatter:{id:"create-plugin",title:"Client Plugin API"},sidebar:"main",previous:{title:"Using Node.js APIs",permalink:"/docs/extending/node-apis"},next:{title:"Error Handling",permalink:"/docs/extending/error-handling"}},m={},g=[{value:"FlipperPlugin",id:"flipperplugin",level:2},{value:"Using FlipperConnection",id:"using-flipperconnection",level:2},{value:"Push data to the desktop",id:"push-data-to-the-desktop",level:2},{value:"Using a plugin instance to send data",id:"using-a-plugin-instance-to-send-data",level:3},{value:"Dependency Injection (Android only)",id:"dependency-injection-android-only",level:4},{value:"using FlipperClient to obtain a plugin instance",id:"using-flipperclient-to-obtain-a-plugin-instance",level:4},{value:"Bi-directional communication demo",id:"bi-directional-communication-demo",level:3},{value:"Background plugins",id:"background-plugins",level:2}],f={toc:g};function v(e){var n=e.components,t=(0,i.Z)(e,d);return(0,l.mdx)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h2",{id:"flipperplugin"},"FlipperPlugin"),(0,l.mdx)("p",null,"The plugin implementation that runs on (mobile) applications is called the ",(0,l.mdx)("em",{parentName:"p"},"client plugin")," in Flipper terminology."),(0,l.mdx)("p",null,"To build a client plugin, implement the ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperPlugin")," interface."),(0,l.mdx)("p",null,"The ID that is returned from your implementation needs to match the ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," defined in your JavaScript counterpart's ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json"),"."),(0,l.mdx)(r.default,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"},{label:"React (JS)",value:"js"}],mdxType:"Tabs"},(0,l.mdx)(o.default,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'public class MyFlipperPlugin implements FlipperPlugin {\n  private FlipperConnection mConnection;\n\n  @Override\n  public String getId() {\n    return "MyFlipperPlugin";\n  }\n\n  @Override\n  public void onConnect(FlipperConnection connection) throws Exception {\n    mConnection = connection;\n  }\n\n  @Override\n  public void onDisconnect() throws Exception {\n    mConnection = null;\n  }\n\n  @Override\n  public boolean runInBackground() {\n    return false;\n  }\n}\n'))),(0,l.mdx)(o.default,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'@interface MyFlipperPlugin : NSObject<FlipperPlugin>\n@end\n\n@implementation MyFlipperPlugin\n\n- (NSString*)identifier { return @"MyFlipperPlugin"; }\n- (void)didConnect:(FlipperConnection*)connection {}\n- (void)didDisconnect {}\n- (BOOL)runInBackground {}\n\n@end\n'))),(0,l.mdx)(o.default,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'class MyFlipperPlugin : public FlipperPlugin {\npublic:\n  std::string identifier() const override { return "MyFlipperPlugin"; }\n  void didConnect(std::shared_ptr<FlipperConnection> conn) override;\n  void didDisconnect() override;\n  bool runInBackground() override;\n};\n'))),(0,l.mdx)(o.default,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("admonition",{type:"warning"},(0,l.mdx)("p",{parentName:"admonition"},"Using Flipper from JavaScript in React Native requires the package ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-native-flipper"},"react-native-flipper")," to be installed in the hosting application.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"import {addPlugin} from 'react-native-flipper';\n\naddPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log('connected');\n  },\n  onDisconnect() {\n    console.log('disconnected');\n  },\n  runInBackground() {\n    return false;\n  },\n});\n"))),(0,l.mdx)(o.default,{value:"js",mdxType:"TabItem"},(0,l.mdx)("admonition",{type:"warning"},(0,l.mdx)("p",{parentName:"admonition"},"Using Flipper from JavaScript in your browser requires the package ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/js-flipper"},"js-flipper")," to be installed in the hosting application.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"import {flipperClient} from 'js-flipper';\n\n// We want to import and start flipper client only in development and test modes\n// We want to exclude it from our production build\nlet flipperClientPromise;\nif (process.env.NODE_ENV !== 'production') {\n  flipperClientPromise = import('js-flipper').then(({flipperClient}) => {\n    flipperClient.start('React Tic-Tac-Toe');\n    return flipperClient;\n  });\n}\n\nflipperClientPromise?.then((flipperClient) => {\n  flipperClient.addPlugin({\n    getId() {\n      return 'MyFlipperPlugin';\n    },\n    onConnect(connection) {\n      console.log('connected');\n    },\n    onDisconnect() {\n      console.log('disconnected');\n    },\n    runInBackground() {\n      return false;\n    },\n  });\n});\n")))),(0,l.mdx)("h2",{id:"using-flipperconnection"},"Using FlipperConnection"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," will be called when your plugin becomes active. This will provide a ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperConnection")," allowing you to register receivers for desktop method calls and respond with data."),(0,l.mdx)(r.default,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"},{label:"React (JS)",value:"js"}],mdxType:"Tabs"},(0,l.mdx)(o.default,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'connection.receive("getData", new FlipperReceiver() {\n  @Override\n  public void onReceive(FlipperObject params, FlipperResponder responder) throws Exception {\n    responder.success(\n        new FlipperObject.Builder()\n            .put("data", MyData.get())\n            .build());\n  }\n});\n'))),(0,l.mdx)(o.default,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'@interface MyFlipperPlugin : NSObject<FlipperPlugin>\n@end\n\n@implementation MyFlipperPlugin\n\n- (NSString*)identifier { return @"MyFlipperPlugin"; }\n\n- (void)didConnect:(FlipperConnection*)connection\n{\n  [connection receive:@"getData" withBlock:^(NSDictionary *params, FlipperResponder *responder) {\n    [responder success:@{\n      @"data":[MyData get],\n    }];\n  }];\n}\n\n- (void)didDisonnect {}\n\n@end\n'))),(0,l.mdx)(o.default,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'void MyFlipperPlugin::didConnect(std::shared_ptr<FlipperConnection> conn) {\n  conn->receive("getData", [](const folly::dynamic &params,\n                             std::unique_ptr<FlipperResponder> responder) {\n    dynamic response = folly::dynamic::object("data", getMyData());\n    responder->success(response);\n  });\n}\n'))),(0,l.mdx)(o.default,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"addPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log('connected');\n    connection.receive('getData', (data, responder) => {\n      console.log('incoming data', data);\n      // respond with some data\n      responder.success({\n        ack: true,\n      });\n    });\n  },\n  // ...as-is\n});\n"))),(0,l.mdx)(o.default,{value:"js",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"flipperClient.addPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log('connected');\n    connection.receive('getData', (data) => {\n      console.log('incoming data', data);\n      // return data to send it as a response\n      return {\n        ack: true,\n      };\n    });\n    // Flipper client can also send the data you return from your async functions\n    connection.receive('getDataAsync', async (data) => {\n      console.log('incoming data', data);\n      const myAsyncData = await doAsyncStuff();\n      // return data to send it as a response\n      return {\n        data: myAsyncData,\n      };\n    });\n    // Flipper client catches your exceptions and sends them as an error response to the desktop\n    connection.receive('getErrorData', (data) => {\n      console.log('incoming data', data);\n      throw new Error('Ooops');\n    });\n    // It catches the execptions in your async functions as well\n    connection.receive('getErrorDataAsync', async (data) => {\n      console.log('incoming data', data);\n      const myAsyncData = await doAsyncStuff();\n      if (!myAsyncData) {\n        throw new Error('Ooops! Async data is not there!!!');\n      }\n    });\n  },\n  // ...as-is\n});\n")))),(0,l.mdx)("h2",{id:"push-data-to-the-desktop"},"Push data to the desktop"),(0,l.mdx)("p",null,"You don't have to wait for the desktop to request data. You can also push data directly to the desktop. If the JS plugin subscribes to the same method, it will receive the data."),(0,l.mdx)(r.default,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"},{label:"React (JS)",value:"js"}],mdxType:"Tabs"},(0,l.mdx)(o.default,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'connection.send("MyMessage",\n    new FlipperObject.Builder()\n        .put("message", "Hello")\n        .build()\n'))),(0,l.mdx)(o.default,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'[connection send:@"getData" withParams:@{@"message":@"hello"}];\n'))),(0,l.mdx)(o.default,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'void MyFlipperPlugin::didConnect(std::shared_ptr<FlipperConnection> conn) {\n  dynamic message = folly::dynamic::object("message", "hello");\n  conn->send("getData", message);\n}\n'))),(0,l.mdx)(o.default,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"addPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log('connected');\n    connection.send('newRow', {message: 'Hello'});\n  },\n  // ...as-is\n});\n"))),(0,l.mdx)(o.default,{value:"js",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"flipperClient.addPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log('connected');\n    connection.send('newRow', {message: 'Hello'});\n  },\n  // ...as-is\n});\n")))),(0,l.mdx)("h3",{id:"using-a-plugin-instance-to-send-data"},"Using a plugin instance to send data"),(0,l.mdx)("p",null,"It is often useful to get an instance of a Flipper plugin to send data to it: Flipper makes this simple with built-in support."),(0,l.mdx)(p.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("h4",{id:"dependency-injection-android-only"},"Dependency Injection (Android only)"),(0,l.mdx)("p",null,"The preferred method to obtain a plugin instance is to use dependency injection when available.\nFor apps like fb4a that use dependency injection, a Module should have already been created by the 'create-plugin' script.\nThis module will define a Singleton instance of your plugin that gets added to the FlipperClient."),(0,l.mdx)("p",null,"You should use this instance of the plugin, by having it injected into your product code by the DI framework.\nAlternatively, you can modify the plugin's injection module so that it injects a component into the FlipperPlugin.")),(0,l.mdx)("h4",{id:"using-flipperclient-to-obtain-a-plugin-instance"},"using FlipperClient to obtain a plugin instance"),(0,l.mdx)("p",null,"Plugins should be treated as singleton instances as there can only be one ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperClient")," and each ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperClient")," can only have one instance of a certain plugin. The Flipper API makes this simple by offering a way to get the current client and query it for plugins."),(0,l.mdx)("p",null,"Plugins are identified by the string that their identifier method returns, in this example, 'MyFlipperPlugin'."),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"Null checks may be required as plugins may not be initialized, such as in production builds.")),(0,l.mdx)(r.default,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.mdx)(o.default,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"final FlipperClient client = AndroidFlipperClient.getInstanceIfInitialized(context);\nif (client != null) {\n  final MyFlipperPlugin plugin = client.getPluginByClass(MyFlipperPlugin.class);\n  plugin.sendData(myData);\n}\n"))),(0,l.mdx)(o.default,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'FlipperClient *client = [FlipperClient sharedClient];\nMyFlipperPlugin *myPlugin = [client pluginWithIdentifier:@"MyFlipperPlugin"];\n[myPlugin sendData:myData];\n'))),(0,l.mdx)(o.default,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto& client = FlipperClient::instance();\nauto myPlugin = client.getPlugin<MyFlipperPlugin>("MyFlipperPlugin");\nif (myPlugin) {\n  myPlugin->sendData(myData);\n}\n')))),(0,l.mdx)("p",null,"In the above snippet, ",(0,l.mdx)("inlineCode",{parentName:"p"},"sendData")," is an example of a method that might be implemented by the Flipper plugin."),(0,l.mdx)("h3",{id:"bi-directional-communication-demo"},"Bi-directional communication demo"),(0,l.mdx)("p",null,"A minimal communication demo for Android and iOS can be found in the 'Sample' project:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/example/index.tsx"},"Desktop implementation")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/android/sample/src/debug/java/com/facebook/flipper/plugins/example/ExampleFlipperPlugin.java"},"Android")," / ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/tree/7bd4f80c2570bebb52af3cf49e45fc6130d6a473/iOS/Plugins/FlipperKitExamplePlugin/FlipperKitExamplePlugin"},"iOS"))),(0,l.mdx)("p",null,"For React Native and JavaScript, there is a simple game of Tic Tac Toe:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/rn-tic-tac-toe/index.tsx"},"Desktop implementation")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/tree/main/react-native/ReactNativeFlipperExample"},"React Native implementation")," / ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/tree/main/js/react-flipper-example"},"JavaScript (React) implementation"))),(0,l.mdx)("h2",{id:"background-plugins"},"Background plugins"),(0,l.mdx)("p",null,"In some cases, you may want to provide data to Flipper even when your plugin is not currently active. Returning true in ",(0,l.mdx)("inlineCode",{parentName:"p"},"runInBackground()")," results in ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," being called as soon as Flipper connects, which enables you to use the connection at any time. For more detals, see the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/client-plugin-lifecycle"},"Client Plugin Lifecycle"),". The advantage of this method is that the desktop plugin can process this data in the background and fire notifications. It also reduces the number of renders and time taken to display the data when the plugin becomes active."),(0,l.mdx)("admonition",{type:"warning"},(0,l.mdx)("p",{parentName:"admonition"},"Please note that a background plugin could keep some data in memory until a Flipper connection is available, such as to keep statistics about the app startup process. However, a plugin shouldn't assume it will eventually get a connection, since this depends on whether the user has enabled the plugin on the Desktop side."),(0,l.mdx)("p",{parentName:"admonition"},"It's important to make sure that unbounded amounts of data are not stored!")))}v.isMDXComponent=!0}}]);