"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7298],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>c});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},p.apply(this,arguments)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){return function(t){var r=u(t.components);return n.createElement(e,p({},t,{components:r}))}},u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(r),d=o,f=c["".concat(a,".").concat(d)]||c[d]||m[d]||p;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<p;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3428:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(83117),o=r(80102),p=(r(67294),r(3905)),a=["components"],i={id:"custom-ports",title:"Running Flipper with Custom Ports",sidebar_label:"Running Flipper with Custom Ports"},s=void 0,l={unversionedId:"custom-ports",id:"custom-ports",title:"Running Flipper with Custom Ports",description:"Flipper ports - mobile  apps that support certificate exchange",source:"@site/../docs/custom-ports.mdx",sourceDirName:".",slug:"/custom-ports",permalink:"/docs/custom-ports",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/custom-ports.mdx",tags:[],version:"current",frontMatter:{id:"custom-ports",title:"Running Flipper with Custom Ports",sidebar_label:"Running Flipper with Custom Ports"},sidebar:"main",previous:{title:"Sandbox",permalink:"/docs/setup/plugins/sandbox"},next:{title:"Stetho Guidance",permalink:"/docs/stetho"}},c={},u=[{value:"Flipper ports - mobile  apps that support certificate exchange",id:"flipper-ports---mobile--apps-that-support-certificate-exchange",level:2},{value:"Android SDK",id:"android-sdk",level:3},{value:"iOS SDK",id:"ios-sdk",level:3},{value:"Flipper ports - apps that do not support certificate exchange",id:"flipper-ports---apps-that-do-not-support-certificate-exchange",level:2},{value:"Metro Server Ports",id:"metro-server-ports",level:2},{value:"ADB Reverse Proxy ports",id:"adb-reverse-proxy-ports",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,p.mdx)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,p.mdx)("h2",{id:"flipper-ports---mobile--apps-that-support-certificate-exchange"},"Flipper ports - mobile  apps that support certificate exchange"),(0,p.mdx)("admonition",{type:"info"},(0,p.mdx)("p",{parentName:"admonition"},"By default, Flipper runs its servers on ports 9088 and 9089.\nThe mobile SDKs look for servers on those ports.")),(0,p.mdx)("p",null,"Each of these can be overridden by setting an environment variable, with the format: ",(0,p.mdx)("inlineCode",{parentName:"p"},"${INSECURE_PORT},${SECURE_PORT}"),"."),(0,p.mdx)("p",null,"To run the desktop app using custom ports, use the following:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"env FLIPPER_PORTS=1111,2222 ./flipper\n")),(0,p.mdx)("p",null,"or with a dev build:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"env FLIPPER_PORTS=1111,2222 yarn start\n")),(0,p.mdx)("h3",{id:"android-sdk"},"Android SDK"),(0,p.mdx)("p",null,"To configure the Android SDK for custom ports, set the ",(0,p.mdx)("inlineCode",{parentName:"p"},"flipper.ports")," prop to your chosen ports ",(0,p.mdx)("inlineCode",{parentName:"p"},"1111,2222")," and then launch the Android app:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"adb shell su 0 setprop flipper.ports 1111,2222\n")),(0,p.mdx)("h3",{id:"ios-sdk"},"iOS SDK"),(0,p.mdx)("p",null,"To configure the iOS SDK for custom ports, set the FLIPPER_PORTS environment variable in your app launch script or set it system-wide through User Defaults:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},'xcrun simctl spawn booted defaults write "Apple Global Domain" "com.facebook.flipper.ports" -string "1111,2222"\n')),(0,p.mdx)("h2",{id:"flipper-ports---apps-that-do-not-support-certificate-exchange"},"Flipper ports - apps that do not support certificate exchange"),(0,p.mdx)("admonition",{title:"rmation",type:"info"},(0,p.mdx)("p",{parentName:"admonition"},"Flipper listens on port 8333 for unsecure (browser, Node.js) connections.")),(0,p.mdx)("p",null,"To run the desktop app using custom ports, use the following:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"env FLIPPER_BROWSER_PORT=1111 ./flipper\n")),(0,p.mdx)("p",null,"or with a dev build:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"env FLIPPER_BROWSER_PORT=1111 yarn start\n")),(0,p.mdx)("p",null,"To connect to Flipper on a different port from ",(0,p.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/tree/main/js/js-flipper"},"js-flipper"),", you need to override its ",(0,p.mdx)("inlineCode",{parentName:"p"},"urlBase")," when you ",(0,p.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/0993d21f3b52d38969e4d2e330eb97ec4d840a9d/js/react-flipper-example/src/FlipperTicTacToe.tsx#L19"},"start it"),"."),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-ts"},"flipperClient.start('React Tic-Tac-Toe', { urlBase: 'localhost:1111' });\n")),(0,p.mdx)("h2",{id:"metro-server-ports"},"Metro Server Ports"),(0,p.mdx)("p",null,"You can also setup Flipper to use a different Metro Server port (default=8081) using this environement variable, as follows:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"METRO_SERVER_PORT=3333 ./flipper\n")),(0,p.mdx)("h2",{id:"adb-reverse-proxy-ports"},"ADB Reverse Proxy ports"),(0,p.mdx)("p",null,"You can setup a different ADB port, used for reverse proxying when plugged through USB (default=5037), using the following:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-sh"},"ANDROID_ADB_SERVER_PORT=4444 ./flipper\n")))}m.isMDXComponent=!0}}]);