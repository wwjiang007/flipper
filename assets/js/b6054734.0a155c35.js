"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9782],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},l.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),m=function(e){return function(n){var t=p(n.components);return i.createElement(e,l({},n,{components:t}))}},p=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,h=m["".concat(o,".").concat(u)]||m[u]||c[u]||l;return t?i.createElement(h,r(r({ref:n},d),{},{components:t})):i.createElement(h,r({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=h;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var d=2;d<l;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},23002:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>m,toc:()=>u});var i=t(83117),a=t(80102),l=(t(67294),t(3905)),o=t(44996),r=(t(39960),["components"]),s={id:"js-custom",title:"Building A Desktop Plugin - Custom UI",sidebar_label:"Custom UI"},d=void 0,m={unversionedId:"tutorial/js-custom",id:"tutorial/js-custom",title:"Building A Desktop Plugin - Custom UI",description:"Displaying your data in a table might work for many use-cases. However, depending on your plugin and data, it might make sense to customize the way your data is visualized.",source:"@site/../docs/tutorial/js-custom.mdx",sourceDirName:"tutorial",slug:"/tutorial/js-custom",permalink:"/docs/tutorial/js-custom",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/tutorial/js-custom.mdx",tags:[],version:"current",frontMatter:{id:"js-custom",title:"Building A Desktop Plugin - Custom UI",sidebar_label:"Custom UI"},sidebar:"main",previous:{title:"Showing a Table",permalink:"/docs/tutorial/js-table"},next:{title:"Publishing Your Plugin",permalink:"/docs/tutorial/js-publishing"}},p={},u=[{value:"Replacing the table",id:"replacing-the-table",level:2},{value:"Overview of the steps to create a Custom UI",id:"overview-of-the-steps-to-create-a-custom-ui",level:2},{value:"Example Custom UI",id:"example-custom-ui",level:2},{value:"The <code>plugin</code> declaration",id:"the-plugin-declaration",level:2},{value:"Writing <code>plugin</code> logic",id:"writing-plugin-logic",level:3},{value:"Testing <code>plugin</code> logic",id:"testing-plugin-logic",level:2},{value:"Building a User Interface for the plugin",id:"building-a-user-interface-for-the-plugin",level:2},{value:"Unit testing the User Interface",id:"unit-testing-the-user-interface",level:2}],c={toc:u};function h(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.mdx)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"Displaying your data in a ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-table"},"table")," might work for many use-cases. However, depending on your plugin and data, it might make sense to customize the way your data is visualized."),(0,l.mdx)("p",null,"This part of the tutorial covers how Flipper uses React to render the plugins and provides a variety of ready-to-use UI components that can be used to build custom plugin UIs."),(0,l.mdx)("h2",{id:"replacing-the-table"},"Replacing the table"),(0,l.mdx)("p",null,"In the following scenario, instead of just listing the mammals as image URLs (as shown in ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-table"},"Desktop Plugin - Table")," page), the images are rendered inside little cards, as shown in the following screenshots."),(0,l.mdx)("img",{alt:"Custom cards UI for our sea mammals plugin",src:(0,o.default)("img/js-custom.png")}),(0,l.mdx)("p",null,"When any of the cards is selected, the relevant mammal's details are displayed in the sidebar."),(0,l.mdx)("h2",{id:"overview-of-the-steps-to-create-a-custom-ui"},"Overview of the steps to create a Custom UI"),(0,l.mdx)("p",null,"The following steps provide an overview of the differences between creating a standard Table UI and a Custom UI."),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"For a standard Table, the default export in ",(0,l.mdx)("inlineCode",{parentName:"li"},"index.tsx")," is from ",(0,l.mdx)("inlineCode",{parentName:"li"},"createTablePlugin"),". For a Custom UI, this is replaced with a custom React component by using the more flexible APIs exposed by the ",(0,l.mdx)("inlineCode",{parentName:"li"},"flipper-plugin"),"."),(0,l.mdx)("li",{parentName:"ol"},"Replace the usual ",(0,l.mdx)("inlineCode",{parentName:"li"},"createTablePlugin")," (for a Table UI) with both a ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," definition and a ",(0,l.mdx)("inlineCode",{parentName:"li"},"Component")," definition which is used for rendering.")),(0,l.mdx)("p",null,"Separating those two concepts helps with testing and maintaining state when the user switches plugins."),(0,l.mdx)("h2",{id:"example-custom-ui"},"Example Custom UI"),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"The code for the example custom UI (shown below) contains numbered comments (such as '// (1)'), which are referenced in the following sections.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport {PluginClient, createState} from 'flipper-plugin';\n\n// (3)\ntype Row = {\n  id: number;\n  title: string;\n  url: string;\n};\n\n// (2)\ntype Events = {\n  newRow: Row;\n};\n\n// (1)\nexport function plugin(client: PluginClient<Events, {}>) {\n  // (5)\n  const rows = createState<Record<string, Row>>({}, {persist: 'rows'});\n  const selectedID = createState<string | null>(null, {persist: 'selection'});\n\n  // (6)\n  client.onMessage('newRow', (row) => {\n    rows.update((draft) => {\n      draft[row.id] = row;\n    });\n  });\n\n  function setSelection(id: number) {\n    selectedID.set('' + id);\n  }\n\n  // (4)\n  return {\n    rows,\n    selectedID,\n    setSelection,\n  };\n}\n\nexport function Component() {\n  return <h1>Sea Mammals plugin</h1>;\n}\n")),(0,l.mdx)("h2",{id:"the-plugin-declaration"},"The ",(0,l.mdx)("inlineCode",{parentName:"h2"},"plugin")," declaration"),(0,l.mdx)("p",null,"Key points regarding the above Example Custom UI code:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The implementation of the plugin is driven by the named and exported function ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin"),",  as defined at ",(0,l.mdx)("inlineCode",{parentName:"li"},"(1)"),"."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," method is called upon instantiating the plugin and receives one argument, ",(0,l.mdx)("inlineCode",{parentName:"li"},"client"),", that which provides all APIs needed to both interact with the Flipper desktop and the plugin loaded into the client application."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"PluginClient")," types all available APIs and takes two generic arguments."),(0,l.mdx)("li",{parentName:"ul"},"The first ",(0,l.mdx)("inlineCode",{parentName:"li"},"Events")," describes all possible events that can be sent from the client plugin to the desktop plugin and determines the events available for ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.onMessage")," (see below)."),(0,l.mdx)("li",{parentName:"ul"},"In the above code, only one event can occur, ",(0,l.mdx)("inlineCode",{parentName:"li"},"newRow"),", as defined at ",(0,l.mdx)("inlineCode",{parentName:"li"},"(2)"),". However, in the real world, there are typically more events."),(0,l.mdx)("li",{parentName:"ul"},"The data provided by this ",(0,l.mdx)("inlineCode",{parentName:"li"},"newRow")," event is described with the ",(0,l.mdx)("inlineCode",{parentName:"li"},"Row")," type, as defined at ",(0,l.mdx)("inlineCode",{parentName:"li"},"(3)"),"."),(0,l.mdx)("li",{parentName:"ul"},"The event names and data structures should correspond with the data that is sent using ",(0,l.mdx)("a",{parentName:"li",href:"/docs/extending/create-plugin#push-data-to-the-desktop"},(0,l.mdx)("inlineCode",{parentName:"a"},"connection.send"))," from the client."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," function has to return an object that captures the entire API you want to expose from the plugin to your UI components and unit tests. In this case, it returns the state atoms ",(0,l.mdx)("inlineCode",{parentName:"li"},"rows")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"selectedID"),", and expose the ",(0,l.mdx)("inlineCode",{parentName:"li"},"setSelection")," method ((see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)"),")).")),(0,l.mdx)("h3",{id:"writing-plugin-logic"},"Writing ",(0,l.mdx)("inlineCode",{parentName:"h3"},"plugin")," logic"),(0,l.mdx)("p",null,"Since the ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," function will execute only once during the entire lifecycle of the plugin, you can use local variables in the function body to preserve state."),(0,l.mdx)("p",null,"In the ",(0,l.mdx)("a",{parentName:"p",href:"#example-custom-ui"},"example Custom UI"),", above, there are two pieces of state (see (5)):"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The set of rows available, ",(0,l.mdx)("inlineCode",{parentName:"li"},"rows"),"."),(0,l.mdx)("li",{parentName:"ul"},"The current selection: ",(0,l.mdx)("inlineCode",{parentName:"li"},"selectionID"),".")),(0,l.mdx)("p",null,"For larger data collections, it's strongly recommended to leverage the better optimized ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/flipper-plugin#createdatasource"},"createDataSource"),". But, in this tutorial  example, ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState")," is sufficient for a small data set."),(0,l.mdx)("p",null,"It's possible to store state directly in ",(0,l.mdx)("inlineCode",{parentName:"p"},"let")," declarations, but ",(0,l.mdx)("inlineCode",{parentName:"p"},"createState")," creates a storage container that gives you a few advantages:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"Most importantly, state created using ",(0,l.mdx)("inlineCode",{parentName:"li"},"createState")," can be subscribed to by the UI components using the ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue")," hook."),(0,l.mdx)("li",{parentName:"ul"},"State created with ",(0,l.mdx)("inlineCode",{parentName:"li"},"createState")," can be made part of Flipper imports / exports.\nThis feature can be used by providing a unique ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," key. The current value of the container can be read using ",(0,l.mdx)("inlineCode",{parentName:"li"},".get()"),", and ",(0,l.mdx)("inlineCode",{parentName:"li"},".set()")," or ",(0,l.mdx)("inlineCode",{parentName:"li"},".update()")," can be used to replace the current value."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"client")," can be used to receive and send information to the client plugin.",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},"With ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.send"),", you can invoke methods on the plugin."),(0,l.mdx)("li",{parentName:"ul"},"With ",(0,l.mdx)("inlineCode",{parentName:"li"},"client.onMessage")," (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(6)"),") you can subscribe to the specific events as specified with the ",(0,l.mdx)("inlineCode",{parentName:"li"},"Events")," type (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(2)"),")."))),(0,l.mdx)("li",{parentName:"ul"},"In the event handler, you can update some pieces of state, using the ",(0,l.mdx)("inlineCode",{parentName:"li"},".set")," method to replace state, or the ",(0,l.mdx)("inlineCode",{parentName:"li"},".update")," method to immutably update the state using ",(0,l.mdx)("a",{parentName:"li",href:"https://immerjs.github.io/immer"},"Immer"),"."),(0,l.mdx)("li",{parentName:"ul"},"In the Example Custom UI, the received row is added to the ",(0,l.mdx)("inlineCode",{parentName:"li"},"rows")," state under its own ",(0,l.mdx)("inlineCode",{parentName:"li"},"id"),"."),(0,l.mdx)("li",{parentName:"ul"},"Finally, (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(7)"),"), you can create (and expose at ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)"),") a utility to update the selection, which is used in the ",(0,l.mdx)("a",{parentName:"li",href:"#building-a-user-interface-for-the-plugin"},"Building a User Interface for the plug")," section, below.")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"No state should be stored outside the ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," definition; multiple invocations of ",(0,l.mdx)("inlineCode",{parentName:"p"},"plugin")," can be 'alive' if multiple connected apps are using the plugin.\nStoring the state inside the closure ensures no state is mixed up.")),(0,l.mdx)("h2",{id:"testing-plugin-logic"},"Testing ",(0,l.mdx)("inlineCode",{parentName:"h2"},"plugin")," logic"),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"This section features a scenario where unit tests are always written before creating a Custom UI for a plugin.")),(0,l.mdx)("p",null,"Unit tests will be picked automatically by Jest if they are named like ",(0,l.mdx)("inlineCode",{parentName:"p"},"__tests__/*.spec.tsx"),", so create a file called ",(0,l.mdx)("inlineCode",{parentName:"p"},"__tests__/seamammals.spec.tsx")," and start the test runner by\nrunning ",(0,l.mdx)("inlineCode",{parentName:"p"},"yarn test --watch")," in your plugin root."),(0,l.mdx)("p",null,"Here is the Initial Unit Test code:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ts"},'// (1)\nimport {TestUtils} from \'flipper-plugin\';\n// (2)\nimport * as MammalsPlugin from \'..\';\n\ntest(\'It can store rows\', () => {\n  // (3)\n  const {instance, sendEvent} = TestUtils.startPlugin(MammalsPlugin);\n\n  expect(instance.rows.get()).toEqual({});\n  expect(instance.selectedID.get()).toBeNull();\n\n  // (4)\n  sendEvent(\'newRow\', {\n    id: 1,\n    title: \'Dolphin\',\n    url: \'http://dolphin.png\',\n  });\n  sendEvent(\'newRow\', {\n    id: 2,\n    title: \'Turtle\',\n    url: \'http://turtle.png\',\n  });\n\n  // (5)\n  expect(instance.rows.get()).toMatchInlineSnapshot(`\n    Object {\n      "1": Object {\n        "id": 1,\n        "title": "Dolphin",\n        "url": "http://dolphin.png",\n      },\n      "2": Object {\n        "id": 2,\n        "title": "Turtle",\n        "url": "http://turtle.png",\n      },\n    }\n  `);\n});\n')),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"The code for the Initial Unit Test (shown above) contains numbered comments (such as '// (1)'), which are referenced in the following information.")),(0,l.mdx)("p",null,"Key points regarding the Initial Unit Test code:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"Testing utilities for plugins are shipped as part of ",(0,l.mdx)("inlineCode",{parentName:"li"},"flipper-plugin"),", so can be imported directly (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(1)"),")."),(0,l.mdx)("li",{parentName:"ul"},"You directly import the above plugin implementation into your unit test."),(0,l.mdx)("li",{parentName:"ul"},"By using ",(0,l.mdx)("inlineCode",{parentName:"li"},"as"),", you put the entire implementation into one object, which is the format in which your utilities expect them (",(0,l.mdx)("inlineCode",{parentName:"li"},"(2)"),")."),(0,l.mdx)("li",{parentName:"ul"},"Using ",(0,l.mdx)("inlineCode",{parentName:"li"},"TestUtils.startPlugin")," (",(0,l.mdx)("inlineCode",{parentName:"li"},"(3)"),") instantiates the plugin in a fully mocked environment where the plugin can do everything except for actually rendering, which makes this operationally inexpensive."),(0,l.mdx)("li",{parentName:"ul"},"From the ",(0,l.mdx)("inlineCode",{parentName:"li"},"startPlugin"),", you get back an ",(0,l.mdx)("inlineCode",{parentName:"li"},"instance"),", which corresponds to the object returned from the ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," implementation (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)")," in the ",(0,l.mdx)("a",{parentName:"li",href:"#example-custom-ui"},"example Custom UI"),", above).",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},"You also get a bunch of utilities to interact with the plugin. The full list is documented ",(0,l.mdx)("a",{parentName:"li",href:"/docs/extending/flipper-plugin#the-test-runner-object"},"Desktop Plugin API")," page. However, for this test, the sole concern is with ",(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvent"),"."))),(0,l.mdx)("li",{parentName:"ul"},"By using ",(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvent"),", you can mimic the client plugin sending events to your plugin ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)"),".\nSimilarly, you can emulate all other possible events, such as the initial connection setup with (",(0,l.mdx)("inlineCode",{parentName:"li"},".connect()"),"), the user (de)selecting the plugin (",(0,l.mdx)("inlineCode",{parentName:"li"},".activate()")," / ",(0,l.mdx)("inlineCode",{parentName:"li"},"deactivate()"),"), or a deeplink being triggered (",(0,l.mdx)("inlineCode",{parentName:"li"},".triggerDeepLink"),"), and so on."),(0,l.mdx)("li",{parentName:"ul"},"After the events have been sent, it's expected the internal state of the plugin should have been updated; this is asserted at point ",(0,l.mdx)("inlineCode",{parentName:"li"},"(5)"),".",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},"The assertions are provided by ",(0,l.mdx)("a",{parentName:"li",href:"https://jestjs.io/"},"Jest"),". Particularly useful is ",(0,l.mdx)("inlineCode",{parentName:"li"},"toMatchInlineSnapshot"),", which generates the initial snapshot during the first run of the unit tests, saving a lot of effort.")))),(0,l.mdx)("h2",{id:"building-a-user-interface-for-the-plugin"},"Building a User Interface for the plugin"),(0,l.mdx)("p",null,"So far, in ",(0,l.mdx)("inlineCode",{parentName:"p"},"index.tsx"),", the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Component")," hasn't yet done anything useful. This section explains how to build an effective and nice-looking UI."),(0,l.mdx)("p",null,"Flipper leverages Ant design, so any ",(0,l.mdx)("a",{parentName:"p",href:"https://ant.design/components/overview/"},"official Ant component")," can be used in Flipper plugins."),(0,l.mdx)("p",null,"The styling system used by Flipper can be found at ",(0,l.mdx)("a",{parentName:"p",href:"/docs/extending/style-guide"},"the style guide"),", where the the different ",(0,l.mdx)("inlineCode",{parentName:"p"},"Layout")," elements are documented."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-tsx"},"import React, {memo} from 'react';\nimport {Typography, Card} from 'antd';\nimport {\n  Layout,\n  PluginClient,\n  usePlugin,\n  createState,\n  useValue,\n  theme,\n  styled,\n  DataInspector,\n  DetailSidebar\n} from 'flipper-plugin';\n\n// (1)\nexport function Component() {\n  // (2)\n  const instance = usePlugin(plugin);\n  // (3)\n  const rows = useValue(instance.rows);\n  const selectedID = useValue(instance.selectedID);\n\n  // (4)\n  return (\n    <>\n      <Layout.ScrollContainer\n        vertical\n        style={{background: theme.backgroundWash}}>\n        <Layout.Horizontal gap pad style={{flexWrap: 'wrap'}}>\n          {Object.entries(rows).map(([id, row]) => (\n            <MammalCard\n              row={row}\n              onSelect={instance.setSelection}\n              selected={id === selectedID}\n              key={id}\n            />\n          ))}\n        </Layout.Horizontal>\n      </Layout.ScrollContainer>\n      <DetailSidebar>\n        {selectedID && renderSidebar(rows[selectedID])}\n      </DetailSidebar>\n    </>\n  );\n}\n\nfunction renderSidebar(row: Row) {\n  return (\n    <Layout.Container gap pad>\n      <Typography.Title level={4}>Extras</Typography.Title>\n      <DataInspector data={row} expandRoot={true} />\n    </Layout.Container>\n  );\n}\n")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"The above User Interface code contains numbered comments (such as '// (1)') that are referenced in the following information.")),(0,l.mdx)("p",null,"Key points regarding the above User Interface code:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"A plugin module can have many components but should always export one component named ",(0,l.mdx)("inlineCode",{parentName:"li"},"Component"),", which is used as the root component for the plugin rendering. The component mustn't take any props and will be mounted by Flipper when the user selects the plugin (",(0,l.mdx)("inlineCode",{parentName:"li"},"see (1)"),")."),(0,l.mdx)("li",{parentName:"ul"},"Inside the component, you can grab the relevant instance of the plugin by using the ",(0,l.mdx)("inlineCode",{parentName:"li"},"usePlugin")," hook (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(2)"),"). This returns the instance API returned in the ",(0,l.mdx)("a",{parentName:"li",href:"#example-custom-ui"},"Example Custom UI")," at the end of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," function.  The original ",(0,l.mdx)("inlineCode",{parentName:"li"},"plugin")," definition is passed to the ",(0,l.mdx)("inlineCode",{parentName:"li"},"usePlugin")," as argument: this is done to get the typings of ",(0,l.mdx)("inlineCode",{parentName:"li"},"instance")," correct and should always be done."),(0,l.mdx)("li",{parentName:"ul"},"With the ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue")," hook (",(0,l.mdx)("inlineCode",{parentName:"li"},"(3)"),"), you can grab the current value from the states created earlier using ",(0,l.mdx)("inlineCode",{parentName:"li"},"createState"),". The benefit of ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue(instance.rows)")," overusing ",(0,l.mdx)("inlineCode",{parentName:"li"},"rows.get()"),", is that the first will automatically subscribe your component to any future updates to the state, causing the component to re-render when new rows arrive."),(0,l.mdx)("li",{parentName:"ul"},"Since both ",(0,l.mdx)("inlineCode",{parentName:"li"},"usePlugin")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue")," are hooks, they usual React rules for them apply; they need to be called unconditionally. So, it's recommended to put them at the top of your component body. Both hooks can not only be used in the root ",(0,l.mdx)("inlineCode",{parentName:"li"},"Component"),", but also in any other component in your plugin component tree. So, it's not necessary to grab all the data at the root and pass it down using props. Using ",(0,l.mdx)("inlineCode",{parentName:"li"},"useValue")," as deep in the component tree as possible will benefit performance."),(0,l.mdx)("li",{parentName:"ul"},"Finally, the data is rendered and returned  (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)"),"). The details have been left out here, as from this point it's just idiomatic React code.")),(0,l.mdx)("admonition",{title:"rmation",type:"info"},(0,l.mdx)("p",{parentName:"admonition"},"The source of the other ",(0,l.mdx)("inlineCode",{parentName:"p"},"MammalCard")," component is located in ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/seamammals/src/index_custom.tsx#L118-L132"},"GitHub"),".")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"It's recommended to keep components outside of the entry file as much as possible because components defined outside the index.tsx file will benefit from fast refresh.")),(0,l.mdx)("h2",{id:"unit-testing-the-user-interface"},"Unit testing the User Interface"),(0,l.mdx)("p",null,"You can lower the chances of regression in the UI by adding another unit test to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"seamammals.spec.tsx")," file and asserting that the rendering is correct and interactive. The following code provides an example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ts"},"test('It can have selection and render details', async () => {\n  // (1)\n  const {\n    instance,\n    renderer,\n    act,\n    sendEvent,\n    exportState,\n  } = TestUtils.renderPlugin(MammalsPlugin);\n\n  // (2)\n  sendEvent('newRow', {\n    id: 1,\n    title: 'Dolphin',\n    url: 'http://dolphin.png',\n  });\n  sendEvent('newRow', {\n    id: 2,\n    title: 'Turtle',\n    url: 'http://turtle.png',\n  });\n\n  // (3) Dolphin card should now be visible\n  expect(await renderer.findByTestId('Dolphin')).not.toBeNull();\n  // (4) Let's assert the structure of the Turtle card as well\n  expect(await renderer.findByTestId('Turtle')).toMatchInlineSnapshot(`\n    <div\n      class=\"css-ok7d66-View-FlexBox-FlexColumn\"\n      data-testid=\"Turtle\"\n    >\n      <div\n        class=\"css-vgz97s\"\n        style=\"background-image: url(http://turtle.png);\"\n      />\n      <span\n        class=\"css-8j2gzl-Text\"\n      >\n        Turtle\n      </span>\n    </div>\n  `);\n\n  // (5) Nothing selected, so we should not have a sidebar\n  expect(renderer.queryAllByText('Extras').length).toBe(0);\n\n  act(() => {\n    instance.setSelection(2);\n  });\n\n  // Sidebar should be visible now\n  expect(await renderer.findByText('Extras')).not.toBeNull();\n\n  // (6) Verify export\n  expect(exportState()).toEqual({\n    rows: {\n      '1': {\n        id: 1,\n        title: 'Dolphin',\n        url: 'http://dolphin.png',\n      },\n      '2': {\n        id: 2,\n        title: 'Turtle',\n        url: 'http://turtle.png',\n      },\n    },\n    selection: '2',\n  });\n});\n")),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"The above User Interface Unit Test code contains numbered comments (such as '// (1)') that are referenced in the following information.")),(0,l.mdx)("p",null,"As in the ",(0,l.mdx)("a",{parentName:"p",href:"#testing-plugin-logic"},"Initial Unit Test"),", you can use ",(0,l.mdx)("inlineCode",{parentName:"p"},"TestUtils")," to start your plugin. But rather than using ",(0,l.mdx)("inlineCode",{parentName:"p"},"startPlugin"),", you now use ",(0,l.mdx)("inlineCode",{parentName:"p"},"renderPlugin"),", which has the same functionality but also renders the component in memory, using the ",(0,l.mdx)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library"),", this enables you to interact with DOM."),(0,l.mdx)("p",null,"Key points regarding the above User Interface Unit Test code:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"You start the UI test by sending some events to the plugin (",(0,l.mdx)("inlineCode",{parentName:"li"},"see (2)"),"). After which (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(3)"),"), the new data should be reflected in the DOM."),(0,l.mdx)("li",{parentName:"ul"},"Since you used ",(0,l.mdx)("inlineCode",{parentName:"li"},"<Card data-testid={row.title}")," in the component implementation (not shown above), you can search in the DOM based on that test-id to find the correct element.  It is also possible to search for other entities, such as a specific classname. The available queries are documented in the ",(0,l.mdx)("a",{parentName:"li",href:"https://testing-library.com/docs/dom-testing-library/api-queries#queries"},"React Testing Library"),"."),(0,l.mdx)("li",{parentName:"ul"},"Rather than just checking that the rendering isn't ",(0,l.mdx)("inlineCode",{parentName:"li"},"null"),", you can also take a snapshot of the DOM and assert that it doesn't change accidentally in the future. Jest's ",(0,l.mdx)("inlineCode",{parentName:"li"},"toMatchInlineSnapshot")," (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(4)"),") is quite useful for that. However, don't overuse it as large snapshots are pretty useless and just create a maintenance burden without catching much."),(0,l.mdx)("li",{parentName:"ul"},"At point ",(0,l.mdx)("inlineCode",{parentName:"li"},"(5)"),", the code simulates updating the selection from code and asserts that the sidebar has become visible. Note that the update is wrapped in ",(0,l.mdx)("inlineCode",{parentName:"li"},"act"),", which is recommended as it makes sure that updates are flushed to the DOM before you make queries and assertions on the DOM (the earlier ",(0,l.mdx)("inlineCode",{parentName:"li"},"sendEvent")," does apply ",(0,l.mdx)("inlineCode",{parentName:"li"},"act")," automatically and doesn't need wrapping)",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},"Alternatively, you could have emulated actually clicking a DOM element, by using ",(0,l.mdx)("inlineCode",{parentName:"li"},"fireEvent.click(renderer.findByTestId('dolphin'))")," (for details, see ",(0,l.mdx)("a",{parentName:"li",href:"https://testing-library.com/docs/dom-testing-library/api-events"},"Firing Events")," in the docs of the React Testing Library)"))),(0,l.mdx)("li",{parentName:"ul"},"Finally (see ",(0,l.mdx)("inlineCode",{parentName:"li"},"(6)"),"), the test grabs the final state of the plugin state by using the ",(0,l.mdx)("inlineCode",{parentName:"li"},"exportState")," utility. It returns all the persistable state of the plugin, based on the ",(0,l.mdx)("inlineCode",{parentName:"li"},"persist")," keys that were passed to ",(0,l.mdx)("inlineCode",{parentName:"li"},"createState")," in the ",(0,l.mdx)("a",{parentName:"li",href:"#example-custom-ui"},"Example Custom UI")," code."),(0,l.mdx)("li",{parentName:"ul"},"You now assert that the plugin ends up in the desired state.")))}h.isMDXComponent=!0}}]);