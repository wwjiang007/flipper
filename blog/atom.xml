<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fbflipper.com/blog</id>
    <title>Flipper Blog</title>
    <updated>2022-05-20T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fbflipper.com/blog"/>
    <subtitle>Flipper Blog</subtitle>
    <icon>https://fbflipper.com/img/icon.png</icon>
    <entry>
        <title type="html"><![CDATA[Headless Flipper - what it means for plugin developers]]></title>
        <id>https://fbflipper.com/blog/2022/05/20/preparing-for-headless-flipper</id>
        <link href="https://fbflipper.com/blog/2022/05/20/preparing-for-headless-flipper"/>
        <updated>2022-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Flipper is moving from an Electron monolith to a headless Node.js app with a web UI. It reshapes how we think about plugins and what plugins can do. We talk about what changes and how to prepare our plugins for the migration.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Cover image" src="/assets/images/preparing-for-headless-flipper-294ecb22648bf0f3d337dac91bdb4553.jpg" width="1920" height="1080" class="img_ev3q"></p><p>We know Flipper as an Electron desktop app that serves mobile developers as
their debugging companion. Thousands of people use Flipper every day to tinker
with their app and get to the bottom of tricky problems.</p><p>As announced in the previous
<a href="https://fbflipper.com/blog/2021/10/14/roadmap/" target="_blank" rel="noopener noreferrer">roadmap post</a>, we are committed
to amplifying how Flipper could improve the quality of our software. We want
take Flipper beyond its current role as a complementary debugging tool, provide
a powerful API, and allow using Flipper in more than just the GUI context (we
call it "headless mode"). Imagine talking to your mobile device (or anything
else that runs Flipper Client) from your terminal. Imagine deploying Flipper
remotely in the cloud and interacting with it from your laptop. Imagine using
your favorite plugins for automated testing.</p><p>In this post we cover:</p><ul><li>How Flipper changes to facilitate the headless mode</li><li>How it affects plugins</li><li>A migration guide</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-flipper-changes">How Flipper changes<a href="#how-flipper-changes" class="hash-link" aria-label="Direct link to How Flipper changes" title="Direct link to How Flipper changes">​</a></h2><p>Let us take a look at how it works today as an Electron app.</p><p><img loading="lazy" alt="Flipper Electron architecture" src="/assets/images/flipper-arch-electron-0bb7ac4254f429cec6d72efb2723fc48.jpg" width="3929" height="1705" class="img_ev3q"></p><p>Here is what happens:</p><ol><li>Flipper starts as an Electron application.<ol><li>WebSocket server starts.</li><li>Device discovery starts via adb/idb/metro.</li><li>Electron shows a web view with Flipper UI (React).</li><li>Flipper UI queries the device discovery service for a list of devices.</li></ol></li><li>At this point, Flipper can already run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-device-plugin" target="_blank" rel="noopener noreferrer">"device" plugins</a>.
These plugins do not receive a connection to a running app. They talk to the
device via adb/idb/metro.</li><li>An app starts on the device.</li><li>Flipper Client embedded in the app connects to the WebSocket server.</li><li>Flipper updates the list of known clients and reflects it in the UI.</li><li>Now Flipper can run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-client-plugin" target="_blank" rel="noopener noreferrer">"client" plugins</a>.</li><li>Client plugins talk to the device application over the WebSocket connection.</li></ol><blockquote><p>You can start Flipper Electron with <code>yarn start</code> from the <code>/desktop</code> folder.</p></blockquote><p>Here is how Flipper Headless works.</p><p><img loading="lazy" alt="Flipper Headless architecture" src="/assets/images/flipper-arch-headless-4fcf4de9017ce09bb960cc538b0f22dd.jpg" width="4088" height="1722" class="img_ev3q"></p><ol><li>Flipper starts as a Node.js application.<ol><li>WebSocket server starts.</li><li>Device discovery starts via adb/idb/metro.</li><li>Web server starts.</li><li>It serves Flipper UI to a browser.</li><li>Flipper UI connects to the WebSocket server.</li><li>Flipper UI sends a message over the WebSocket connection to query the
device discovery service for a list of devices.</li></ol></li><li>At this point, Flipper can already run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-device-plugin" target="_blank" rel="noopener noreferrer">"device" plugins</a>.
These plugins do not receive a connection to a running app. They talk to the
device via adb/idb/metro.</li><li>An app starts on the device.</li><li>Flipper Client embedded in the app connects to the WebSocket server.</li><li>Flipper updates the list of known clients. It sends a message over the
WebSocket connection to Flipper UI with the information about the new device.</li><li>Now Flipper can run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-client-plugin" target="_blank" rel="noopener noreferrer">"client" plugins</a>.</li><li>Client plugins talk to the device application over the WebSocket bridge - the
connection from Flipper UI to Flipper WebSocket server piped to the
connection from the device application to the Flipper WebSocket server.</li></ol><blockquote><p>You can start Flipper Electron with <code>yarn flipper-server</code> from the <code>/desktop</code>
folder.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-affects-plugins">How it affects plugins<a href="#how-it-affects-plugins" class="hash-link" aria-label="Direct link to How it affects plugins" title="Direct link to How it affects plugins">​</a></h2><p>Plugins are hosted by Flipper UI. When it was a part of the Electron app, there
was no problem. Plugins could access any Node.js APIs thanks to Electron magic.
There were no constraints on what plugins could do. After making Flipper UI a
proper web app running in a browser, we limited what plugins can do. They no
longer can access the network stack or the file system because there are no
corresponding browser APIs. Yet, we want to keep Flipper flexible and provide as
much freedom to plugin developers as possible. Moreover, we could not leave the
existing plugins without a clear migration path.</p><p><img loading="lazy" alt="Flipper remote Node.js API" src="/assets/images/flipper-node-apis-4aba0d159e443443f757c4d64cd4fece.jpg" width="4815" height="1839" class="img_ev3q"></p><p>Since we already have a WebSocket connection between Flipper UI and Flipper
Server, we can model almost any request-response and even stream-based Node.js
APIs over it. So far, we exposed a curated subset of them:</p><ul><li>child_process<ul><li>exec</li></ul></li><li>fs (and <a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noopener noreferrer">fs-extra</a>)<ul><li>constants</li><li>access</li><li>pathExists</li><li>unlink</li><li>mkdir</li><li>rm</li><li>copyFile</li><li>stat</li><li>readlink</li><li>readFile</li><li>writeFile</li></ul></li></ul><p>We also provided a way to
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L83" target="_blank" rel="noopener noreferrer">download a file</a>
or send requests to the
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L186" target="_blank" rel="noopener noreferrer">internal infrastructure</a>.</p><blockquote><p>Please, find the complete list of available APIs on
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L95" target="_blank" rel="noopener noreferrer">GitHub</a>.
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L47" target="_blank" rel="noopener noreferrer">Here are Node.js API abstractions</a>
specifically.</p></blockquote><p>As you might have noticed, all exposed APIs are of the request-response nature.
They assume a short finite controlled lifespan. Yet, some plugins start
additional web servers or spawn long-living child processes. To control their
lifetime we need to track them on Flipper Server side and stop them whenever
Flipper UI disconnects. Say hello to a new experimental feature - Flipper Server
Add-ons!</p><p><img loading="lazy" alt="Flipper Server Add-on" src="/assets/images/flipper-add-on-e9cbd5876aec62d6cf0b3c8bbbb21f07.jpg" width="2372" height="1806" class="img_ev3q"></p><p>Now, every flipper plugin could have "server add-on" meta-information. Whenever
a Flipper plugin that has a corresponding Server Add-on starts, it sends a
command to Flipper Server to start its Server Add-on counterpart. Flipper plugin
that lives in a browser inside of Flipper UI talks to its server add-on over the
WebSocket connection. Whenever a user disables a plugin, Flipper sends a command
to Flipper Server to stop the add-on. At the same time, if Flipper UI crashes or
the user just closes the tab, Flipper Server can kill the server add-on on its
own.</p><p>Flipper plugin can talk to its server add-on companion (see
<code>onServerAddOnMessage</code>, <code>onServerAddOnUnhandledMessage</code>, <code>sendToServerAddOn</code> in
<a href="https://fbflipper.com/docs/extending/flipper-plugin/#pluginclient" target="_blank" rel="noopener noreferrer">the docs</a>)
and act whenever it starts or stops (see <code>onServerAddOnStart</code>,
<code>onServerAddOnStop</code> in
<a href="https://fbflipper.com/docs/extending/flipper-plugin/#pluginclient" target="_blank" rel="noopener noreferrer">the docs</a>).</p><p>Say, you wrote an ultimate library to find primes. You were cautious of the
resource consumption, so you did it in Rust. You created a CLI interface for
your new shiny library. Now, you want your Flipper plugin to use it. It takes a
long time to find a prime and you want to keep track of the progress. You could
use <code>getFlipperLib().remoteServerContext.childProcess.exec</code>, but it is not
flexible enough to monitor progress updates that your CLI sends to stdout. Here
is how you could approach it:</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// contract.tsx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ServerAddOnEvents</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Server add-on sends "progress" events with the progress updates</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  progress</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ServerAddOnMethods</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Client plugin send "findPrime" messages to the server add-on to start finding primes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">findPrime</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// index.tsx (your plugin)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports">usePlugin</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> useValue</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> createState</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">PluginClient</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'flipper-plugin'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports maybe-class-name">ServerAddOnEvents</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">ServerAddOnMethods</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./contract'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">plugin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  client</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">PluginClient</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token maybe-class-name">ServerAddOnEvents</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token maybe-class-name">ServerAddOnMethods</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> prime </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(130, 170, 255)">createState</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token generic-function generic class-name builtin" style="color:rgb(130, 170, 255)">number</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)"> </span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">|</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(255, 203, 107);font-style:italic">null</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> progress </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(130, 170, 255)">createState</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token generic-function generic class-name builtin" style="color:rgb(130, 170, 255)">number</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">onServerAddOnStart</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> newPrime </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">sendToServerAddOn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'findPrime'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    prime</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">set</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">newPrime</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">onServerAddOnStart</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">onServerAddOnMessage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'progress'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> progressUpdate </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      progress</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">set</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">progressUpdate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    prime</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    progress</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">Component</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> pluginInstance </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">usePlugin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">plugin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> prime </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">pluginInstance</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">prime</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> progress </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">pluginInstance</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">progress</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">prime </span><span class="token operator" style="color:rgb(137, 221, 255)">??</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Calculating (</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">progress</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">%) done...</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// serverAddOn.tsx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports maybe-class-name">ServerAddOn</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'flipper-plugin'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports">exec</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">ChildProcess</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'child_process'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports maybe-class-name">ServerAddOnEvents</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">ServerAddOnMethods</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./contract'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> serverAddOn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">ServerAddOn</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">ServerAddOnEvents</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token maybe-class-name">ServerAddOnMethods</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> connection </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> findPrimeChildProcess</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">ChildProcess</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">undefined</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    connection</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">receive</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'findPrime'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">findPrimeChildProcess</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Allow only one findPrime request at a time. Finding primes is expensive!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Too many requests!'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Start our awesome Rust lib</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      findPrimeChildProcess </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">exec</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/find-prime-cli'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">shell</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Return a Promise that resolves when a prime is found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Flipper will serialize the value the promise is resolved with and send it oer the wire.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name builtin" style="color:rgb(130, 170, 255)">Promise</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">resolve </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Listen to stdout of the lib for the progress updates and, eventually, the prime</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        findPrimeChildProcess</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">stdout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'data'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> data </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Say, data is a stringified JSON</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> parsed </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">JSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">parse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">parsed</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">type</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'progress'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            connection</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">send</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'progress'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> parsed</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token keyword" style="font-style:italic">return</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Allow new requests to find new primes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          findPrimeChildProcess </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">undefined</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// If it is not a progress update, then a prime is found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token function" style="color:rgb(130, 170, 255)">resolve</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">parsed</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">default</span><span class="token plain"> serverAddOn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="migration-guide">Migration guide<a href="#migration-guide" class="hash-link" aria-label="Direct link to Migration guide" title="Direct link to Migration guide">​</a></h2><ol><li><p>Examine your plugins for Node.js APIs. Replace them with
<code>getFlipperLib().remoteServerContext.*</code> calls.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// before</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports">mkdir</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'fs/promises'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">plugin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">myAwesomeFn</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">mkdir</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/universe/dagobah'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    myAwesomeFn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// after</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports">getFlipperLib</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'flipper-plugin'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">plugin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">myAwesomeFn</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getFlipperLib</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">remoteServerContext</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">mkdir</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/universe/dagobah'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    myAwesomeFn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>If your plugin uses network stack of spawns a subprocess, consider creating a
Server Add-on.</p><ol><li><p>In your plugin's folder create a new file - <code>serverAddOn.tsx</code></p></li><li><p>In your plugin's package.json add fields <code>serverAddOn</code> and
<code>flipperBundlerEntryServerAddOn</code></p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token string-property property">"serverAddOn"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"dist/serverAddOn.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token string-property property">"flipperBundlerEntryServerAddOn"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"serverAddOn.tsx"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>Move your Node.js API calls to <code>serverAddOn.tsx</code></p></li></ol></li><li><p>Verify your plugin works in a browser environment.</p><ol><li>Clone <a href="https://github.com/facebook/flipper" target="_blank" rel="noopener noreferrer">Flipper repo</a>.</li><li>Navigate to the <code>desktop</code> folder.</li><li>In your terminal run <code>yarn</code>.</li><li>Run <code>yarn flipper-server</code>.</li><li>Load your plugin and make sure it works.</li></ol></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ps-flipper-needs-you">P.S. Flipper needs you!<a href="#ps-flipper-needs-you" class="hash-link" aria-label="Direct link to P.S. Flipper needs you!" title="Direct link to P.S. Flipper needs you!">​</a></h2><p>Flipper is maintained by a small team at Meta, yet is serving over a hundred
plugins and dozens of different targets. Our team's goal is to support Flipper
as a plugin-based platform for which we maintain the infrastructure. We don't
typically invest in individual plugins, but we do love plugin improvements.</p><p>For that reason, we've marked many requests in the issue tracker as
<a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22" target="_blank" rel="noopener noreferrer">PR Welcome</a>.
Contributing changes should be as simple as cloning the
<a href="https://github.com/facebook/flipper" target="_blank" rel="noopener noreferrer">repository</a> and running
<code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will
benefit iteration speed. And we hope Flipper will make it as hassle free as
possible to create your debugging tools. For an overview of Flipper for React
Native, and why and how to build your own plugins, we recommend checking out the
<a href="https://youtu.be/WltZTn3ODW4" target="_blank" rel="noopener noreferrer">Flipper: The Extensible DevTool Platform for React Native</a>
talk.</p><p>Happy debugging!</p>]]></content>
        <author>
            <name>Andrey Goncharov</name>
            <uri>https://github.com/aigoncharov</uri>
        </author>
        <category label="flipper" term="flipper"/>
        <category label="headless" term="headless"/>
        <category label="plugins" term="plugins"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flipper is coming to your web and Node.js apps]]></title>
        <id>https://fbflipper.com/blog/2022/02/21/js-flipper-announcement</id>
        <link href="https://fbflipper.com/blog/2022/02/21/js-flipper-announcement"/>
        <updated>2022-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Flipper now provides an official JavaScript client. We will see what `js-flipper` is, go over Flipper communication protocol, talk about what it takes to build a new Flipper client.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Cover image" src="/assets/images/js-flipper-94b22eaefb5d7fde51e4b4985e7fb41c.jpg" width="1748" height="1240" class="img_ev3q"></p><p>For quite some time already, Flipper has secretly provided an experimental
JavaScript SDK to support connections from browsers and Node.js under the name
of <code>flipper-js-client-sdk</code>. With the ongoing migration of all our clients to
WebSockets, we have committed to providing an official documented SDK for
JavaScript clients. Without further ado, welcome
<a href="https://www.npmjs.com/package/js-flipper" target="_blank" rel="noopener noreferrer">js-flipper</a>!</p><p>In this post we will:</p><ul><li>See what <code>js-flipper</code> is</li><li>Get acquainted with how to build a Flipper plugin for a React app</li><li>Learn how Flipper talks to a mobile device</li><li>Dive deeper into the message structure</li><li>Glance at what it takes to support a new platform</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-js-flipper-is-and-why-it-matters">What <code>js-flipper</code> is and why it matters<a href="#what-js-flipper-is-and-why-it-matters" class="hash-link" aria-label="Direct link to what-js-flipper-is-and-why-it-matters" title="Direct link to what-js-flipper-is-and-why-it-matters">​</a></h2><p>Flipper supports native iOS, native Android apps and React Native apps out of
the box. Now with <code>js-flipper</code>, Flipper also supports JavaScript apps. Any
JavaScript app, whether they run in your browser or on your Node.js server, can
now connect to Flipper for a debugging session.</p><p><code>js-flipper</code> is a new NPM package that exposes a Flipper client to your
JavaScript apps. Any Flipper client, in its turn, is a set of abstractions that
let your device connect and talk to Flipper. Long story short, <code>js-flipper</code>
allows you to easily write Flipper plugins for your web and Node.js apps.</p><blockquote><p><a href="https://fbflipper.com/docs/tutorial/javascript/" target="_blank" rel="noopener noreferrer">Here</a> is how you can write
your first simple plugin.</p></blockquote><p>Why does it matter?</p><p>It's a huge deal for two reasons:</p><ol><li>Flipper at its core is just a device discovery service with a message bus.
Its power comes from the plugins and the ecosystem.</li><li>It brings us one step closer to our goal of running Flipper everywhere. Bring
Flipper to your microwave! On a serious note, more platforms -&gt; bigger
community -&gt; more developers -&gt; more plugins -&gt; better Flipper for everyone.</li></ol><p>Let's take a quick look at the principal architecture of Flipper:</p><p><img loading="lazy" alt="Flipper architecture" src="/assets/images/flipper-arch-441273eacc9c6f4607b53aa6e0189a05.svg" width="2901" height="1535" class="img_ev3q"></p><p>Here is what happens there:</p><ol><li>Flipper constantly polls
<a href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noopener noreferrer">ADB</a> for available
Android devices and <a href="https://fbidb.io/" target="_blank" rel="noopener noreferrer">IDB</a> for available iOS devices.</li><li>If the device is running an app with an enabled Flipper client, the client
tries to connect to Flipper on your laptop. It lets Flipper know that there
is an app that it can talk to. Flipper and app chit-chat a bit negotiating
the security and the list of supported plugins.</li><li>The developer picks one of the connected apps / devices. Say, it's the app.</li><li>The developer clicks one of the available plugins.</li><li>The plugin starts talking to the app on the device via the message bus
exposed by Flipper. The plugin asks for necessary data from the app and shows
it in a pretty UI.</li></ol><p>At Meta, we have many active plugins, across a wide variety of devices, not just
phones, but also Quests, desktop applications, etc. At its core, Flipper is
data-agnostic and connect data flows to plugin displays. All Flipper core (we
call it Flipper Server) knows is what devices and Flipper-enabled apps are out
there. I hope it gets us on the same page regarding why plugins (and plugin
developers!) are crucial for Flipper.</p><p>Another important conclusion you could draw from the diagram is that the state
of Flipper plugins is ephemeral and lives in the UI.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-flipper-talks-to-a-mobile-device">How Flipper talks to a mobile device<a href="#how-flipper-talks-to-a-mobile-device" class="hash-link" aria-label="Direct link to How Flipper talks to a mobile device" title="Direct link to How Flipper talks to a mobile device">​</a></h2><p>Let's dive a bit deeper into how exactly the device and Flipper talk. Flipper
pulls device logs from ADB/IDB. For everything else, Flipper expects the app
(Flipper client inside of the app) to open a WebSocket connection to Flipper.</p><p>The algorithm looks like this:</p><ol><li>The app opens a WebSocket connection to Flipper.</li><li>They exchange certificates. Flipper connects to the app using ADB/IDB and
writes a certificate to the app storage.</li><li>The app opens a secure WebSocket connection to Flipper using the certificate.</li></ol><p>Why do we even bother with the certificate exchange process? One of the
potential attack vectors is that a developer could install a malicious app on
the testing device. That app could spin up a WebSocket server and mask itself as
Flipper. However, unlike Flipper, the malicious app can't access the file
storage of another app. As a result, it can't complete the certificate exchange
process.</p><p>On mobile devices certificate exchange is important, so that other apps on the
phone can't impersonate Flipper. For browser apps this isn't an issue as the
browser already makes sure a malicious page cannot act as Flipper server. For
platforms like this, we use a simplified connection algorithm:</p><ol><li>The app opens a WebSocket connection to Flipper.</li><li>Bingo!</li></ol><p><code>js-flipper</code> implements the second algorithm, without the certificate exchange.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="message-protocol-and-structure">Message protocol and structure<a href="#message-protocol-and-structure" class="hash-link" aria-label="Direct link to Message protocol and structure" title="Direct link to Message protocol and structure">​</a></h2><p>Once the final WebSocket connection is established, Flipper starts talking to
the app:</p><ol><li>It sends <code>getPlugins</code> and <code>getBackgroundPlugins</code> messages to get a list of
plugins supported by the app.</li><li>Flipper displays the available plugins to the developer.</li><li>Developer clicks on one of the plugins (enables a plugin).</li><li>Flipper loads the UI for the plugin. Let's settle on calling the part of the
plugin "desktop plugin" and the device part of the plugin "client plugin".</li><li>Flipper sends <code>init</code> message to the app.</li><li>Client plugin <code>onConnect</code> code is executed. Read more about Client Plugin API
<a href="https://fbflipper.com/docs/extending/create-plugin/" target="_blank" rel="noopener noreferrer">here</a>.</li><li>Whenever a "desktop plugin" needs some data from the device it sends an
<code>execute</code> message to the "client plugin" on the device.</li><li>"Client plugin" replies with the data.</li><li>"Client plugin" might force the "desktop plugin" to do something as well by
sending an <code>execute</code> message as well. However, it is rare. In the current
implementation, the "client plugin" can never expect a reply back from the
"desktop plugin". In other words, consider it as an event sink, not as a way
to extract some data from the "desktop plugin".</li><li>When the plugin is deactivated a <code>deinit</code> message is sent to the "client
plugin".</li><li>Client plugin <code>onDisconnect</code> code is executed.</li></ol><blockquote><p>The process above is for the insecure WebSocket connections we currently use
in <code>js-flipper</code>. It is more complicated for secure WebSocket connections that
require certificate exchange.</p></blockquote><p>Flipper expects each message to have the following structure:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">FlipperRequest</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  method</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// 'getPlugins' | 'getBackgroundPlugins' | 'init' | 'deinit' | 'execute' | 'isMethodSupported'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  params</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    api</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Plugin ID (name)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// These nested `method` and `params` could be anything.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// You set them yourself as you see fit to support the data exchange between the "desktop plugin" and the "client plugin".</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// For example, for 'ReactNativeTicTacToe' we support 2 methods: 'SetState' and 'GetState'.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// We pass a game state with a 'SetState' message. See https://fbflipper.com/docs/tutorial/javascript/#step-3-call-addplugin-to-add-your-plugin</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    method</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    params</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The only exception is the response message the "client plugin" sends back when
the data is requested.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">FlipperResponse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  success</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> object </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">boolean</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  error</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    message</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    stacktrace</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    name</span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-a-new-client">Building a new client<a href="#building-a-new-client" class="hash-link" aria-label="Direct link to Building a new client" title="Direct link to Building a new client">​</a></h2><p>At this point, you know what messages your client needs to support in a Flipper
client:</p><ul><li><code>getPlugins</code></li><li><code>getBackgroundPlugins</code></li><li><code>init</code></li><li><code>deinit</code></li><li><code>execute</code></li></ul><p>One other message we did not mention before is <code>isMethodSupported</code>. Its job is
to reply back to a "desktop plugin" whether a "client plugin" supports one of
plugin messages (that nested <code>method</code> field). It's useful when you have a single
"desktop plugin" implementation, but different "client plugin" implementations.
For example, some operations might not be supported on iOS, but are supported on
Android. Alternatively, it can address version differences between the plugin
installed on the device and the one loaded into Flipper.</p><p>If you want to build a proper Flipper client, you also need to provide an
abstraction for plugin developers. Consider matching
<a href="https://fbflipper.com/docs/extending/create-plugin/#flipperplugin" target="_blank" rel="noopener noreferrer">what we have for existing clients</a>.</p><p>Most of the groundwork for handling connections and doing certificate exchange
is already done in our
<a href="https://github.com/facebook/flipper/tree/main/xplat" target="_blank" rel="noopener noreferrer">C++ engine</a>. Our iOS,
Android, React Native clients use it under the hood. <code>js-flipper</code> implements
everything from scratch using native browser APIs (for Node.js apps we
<a href="https://github.com/facebook/flipper/tree/main/js/js-flipper#nodejs" target="_blank" rel="noopener noreferrer">require developers to provide a WebSocket implementation</a>).</p><p>Here is a detailed document on how to
<a href="https://fbflipper.com/docs/extending/new-clients/" target="_blank" rel="noopener noreferrer">implement a client</a>. You
might also want to check the source code of our existing clients:</p><ul><li><a href="https://github.com/facebook/flipper/tree/main/iOS/FlipperKit" target="_blank" rel="noopener noreferrer">iOS</a></li><li><a href="https://github.com/facebook/flipper/tree/main/android/src/main" target="_blank" rel="noopener noreferrer">Android</a></li><li><a href="https://github.com/facebook/flipper/tree/main/react-native/react-native-flipper" target="_blank" rel="noopener noreferrer">React Native</a></li><li><a href="https://github.com/facebook/flipper/tree/main/js/js-flipper" target="_blank" rel="noopener noreferrer">JavaScript</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a href="#whats-next" class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?">​</a></h2><p>As of now, we do not provide any default plugins you might be used to for
<code>js-flipper</code> (Layout, Logs, Navigation, Crash Reporter, and others). We hope
this will change in the future with the help of ur beloved open-source
community!</p><p><em>Call to action!</em></p><p>We would like to encourage you to play with <code>js-flipper</code>. See how it fits your
use-case and get back back to us with your feedback on
<a href="https://github.com/facebook/flipper/issues" target="_blank" rel="noopener noreferrer">GitHub</a>. If you find yourself
implementing one of your favorite Flipper plugins for <code>js-flipper</code>, do not
hesitate and raise a PR!</p><p>Plugins can be either generic or very application specific. Plugins can interact
with Redux or MobX stores, read performance data or console logs from the
browser. At Meta, we also see a lot of plugins that are very application
specific. For example, plugins that allow logging in as specific test users with
a single click, reading the internal state of NewsFeed and interacting with it,
simulating photos captured by a smartphone, etc. A Flipper plugin can be any
form of UI that is useful to speed up debugging and tasks on things you work on
frequently!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ps-flipper-needs-you">P.S. Flipper needs you!<a href="#ps-flipper-needs-you" class="hash-link" aria-label="Direct link to P.S. Flipper needs you!" title="Direct link to P.S. Flipper needs you!">​</a></h2><p>Flipper is maintained by a small team at Meta, yet is serving over a hundred
plugins and dozens of different targets. Our team's goal is to support Flipper
as a plugin-based platform for which we maintain the infrastructure. We don't
typically invest in individual plugins, but we do love plugin improvements. For
example, the support for mocking network requests (on Android) was entirely
contributed by the community (thanks
<a href="https://github.com/bizzguy" target="_blank" rel="noopener noreferrer">James Harmon</a>!). As was Protobuf support (thanks
<a href="https://github.com/hbmartin" target="_blank" rel="noopener noreferrer">Harold Martin</a>!).</p><p>For that reason, we've marked many requests in the issue tracker as
<a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22" target="_blank" rel="noopener noreferrer">PR Welcome</a>.
Contributing changes should be as simple as cloning the
<a href="https://github.com/facebook/flipper" target="_blank" rel="noopener noreferrer">repository</a> and running
<code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will
benefit iteration speed. And we hope Flipper will make it as hassle free as
possible to create your debugging tools. For an overview of Flipper for React
Native, and why and how to build your own plugins, we recommend checking out the
<a href="https://youtu.be/WltZTn3ODW4" target="_blank" rel="noopener noreferrer">Flipper: The Extensible DevTool Platform for React Native</a>
talk.</p><p>Happy debugging!</p>]]></content>
        <author>
            <name>Andrey Goncharov</name>
            <uri>https://github.com/aigoncharov</uri>
        </author>
        <category label="flipper" term="flipper"/>
        <category label="web" term="web"/>
        <category label="react" term="react"/>
        <category label="node.js" term="node.js"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flipper 2021 Roadmap Update]]></title>
        <id>https://fbflipper.com/blog/2021/10/14/roadmap</id>
        <link href="https://fbflipper.com/blog/2021/10/14/roadmap"/>
        <updated>2021-10-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is next for Flipper?]]></summary>
        <content type="html"><![CDATA[<p>Over the last year, the Flipper adoption in the open source community has doubled, and for many React Native developers Flipper has become the default debugging tool.
As the community continues to grow, we believe it’s important to share updates about our plans. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-short-look-back">A short look back<a href="#a-short-look-back" class="hash-link" aria-label="Direct link to A short look back" title="Direct link to A short look back">​</a></h2><p>During the first half of 2021, we have introduced support for connecting to physical iOS devices by leveraging <a href="https://fbidb.io/" target="_blank" rel="noopener noreferrer">idb</a>.
We have also introduced the <a href="https://fbflipper.com/docs/extending/sandy-migration" target="_blank" rel="noopener noreferrer">Sandy plugin architecture</a>, which simplifies the creation of plugins and provides a richer set of UI components by adopting <a href="https://ant.design/components/overview/" target="_blank" rel="noopener noreferrer">Ant Design</a>.
The new architecture is strongly typed, easily unit testable and allows us to <a href="https://youtu.be/WCs09c1B1Lk" target="_blank" rel="noopener noreferrer">process and render data much faster</a>, which has (at Facebook at least) significantly increased the up-time of Flipper.
The underlying mechanism has been open sourced as the <a href="https://www.npmjs.com/package/flipper-data-source" target="_blank" rel="noopener noreferrer"><code>flipper-data-source</code></a> package.
And last but not least, we introduced dark mode support.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-ahead">What is ahead?<a href="#what-is-ahead" class="hash-link" aria-label="Direct link to What is ahead?" title="Direct link to What is ahead?">​</a></h2><p>Our focus for Flipper for Q4 2021 is to remove friction and make it easier to onboard new targets.
This is because, in many instances, Flipper isn't used just to debug mobile apps, but also to debug many of our other products, such as native and Electron-based desktop applications, and devices like Oculus, Portal or feature phones.</p><p>Looking ahead, we plan to:</p><ul><li><strong>Move away from RSocket</strong>. RSocket is a protocol that served us well for encrypted communication between Flipper and clients. However, especially in the React Native world, the dependencies it brings has been a continuous source of build issues with any new iOS update. We are now testing internally a version of Flipper that uses secured WebSocket connections instead. The resulting simplified dependency chain should prevent a lot of current and future build issues.</li><li><strong>Introduce a headless Flipper version</strong>. The Flipper team is currently investing in decoupling all network, OS and device interaction logic from the Flipper front end. This will make it possible to run Flipper as a headless service, and embed the UI in any web-based stack. By default Flipper will remain an Electron app, but this change introduces a lot of new possibilities: It will be possible to run Flipper headless on CI systems to collect data during test runs. It will be possible to embed the Flipper UI inside IDEs to reduce context switching. To achieve this, the Flipper code base will be split into many smaller packages.</li><li><strong>Improve the Flipper marketplace</strong>. We are working on an improved Flipper plugin marketplace, to help promote plugins, and create a better understanding of what plugins do, and how they are supported.</li><li><strong>Create a reference WebSocket implementation</strong>. For Native mobile apps and React Native, there are standard packages to register plugins and connect to the Flipper desktop application. Although several WebSocket implementations exist to do the same for web apps, we don't have a standardized SDK and example project for integrating web applications with Flipper. By changing this we'll hope to make it easy for front-end engineers to leverage Flipper.</li><li><strong>Add support for React Native Windows</strong>. 'nough said.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="flipper-needs-you">Flipper needs you!<a href="#flipper-needs-you" class="hash-link" aria-label="Direct link to Flipper needs you!" title="Direct link to Flipper needs you!">​</a></h2><p>Flipper is maintained by a small team at Facebook, yet serving over a hundred plugins and dozens of different targets. Our team's goal is to support Flipper as a plugin-based platform for which we maintain the infrastructure.
We don't typically invest in individual plugins, but we do love plugin improvements. For example, the support for mocking network requests (on Android) was entirely contributed by the community (thanks <a href="https://github.com/bizzguy" target="_blank" rel="noopener noreferrer">James Harmon</a>!). As was Protobuf support (thanks <a href="https://github.com/hbmartin" target="_blank" rel="noopener noreferrer">Harold Martin</a>!).</p><p>For that reason, we've marked many requests in the issue tracker as <a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22" target="_blank" rel="noopener noreferrer">PR Welcome</a>.
Contributing changes should be as simple as cloning the <a href="https://github.com/facebook/flipper" target="_blank" rel="noopener noreferrer">repository</a> and running <code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will benefit iteration speed.
And we hope Flipper will make it as hassle free as possible to create your debugging tools.
For an overview of Flipper for React Native, and why and how to build your own plugins, we recommend checking out the <a href="https://youtu.be/WltZTn3ODW4" target="_blank" rel="noopener noreferrer">Flipper: The Extensible DevTool Platform for React Native</a> talk.</p><p>Happy debugging!</p>]]></content>
        <author>
            <name>Michel Weststrate</name>
            <uri>https://github.com/mweststrate</uri>
        </author>
        <category label="flipper" term="flipper"/>
        <category label="react-native" term="react-native"/>
    </entry>
</feed>